/**
 * Integration Tests for Phase 2 Smart Automation Components
 * Tests the integration between new automation services and existing systems
 */

import smartTemplateService from '../smartTemplateService';
import autoReportService from '../autoReportService';
import photoService from '../photoService';
import reportService from '../reportService';

describe('Phase 2 Smart Automation Integration', () => {
  let testPhotos = [];
  let testProjectId = 'test-project-001';

  beforeEach(() => {
    // Create test photos with realistic metadata
    testPhotos = [
      {
        id: 'test-photo-1',
        originalName: 'kitchen_progress_001.jpg',
        caption: 'Kitchen cabinet installation progress',
        description: 'Upper cabinets installed in executive kitchen',
        capturedAt: '2025-01-20T09:30:00Z',
        category: 'progress',
        location: {
          building: 'Main Building',
          floor: 'Ground Floor',
          room: 'Executive Kitchen',
          area: 'Upper Cabinets'
        },
        project: {
          id: testProjectId,
          workCategory: 'Millwork'
        },
        tags: ['installation', 'progress', 'millwork'],
        url: 'test-url-1',
        thumbnail: 'test-thumbnail-1'
      },
      {
        id: 'test-photo-2',
        originalName: 'quality_inspection_002.jpg',
        caption: 'Quality inspection of countertop',
        description: 'Marble countertop quality check passed',
        capturedAt: '2025-01-20T14:15:00Z',
        category: 'quality',
        location: {
          building: 'Main Building',
          floor: 'Ground Floor',
          room: 'Executive Kitchen',
          area: 'Countertops'
        },
        project: {
          id: testProjectId,
          workCategory: 'Construction'
        },
        tags: ['quality', 'inspection', 'countertops'],
        url: 'test-url-2',
        thumbnail: 'test-thumbnail-2'
      },
      {
        id: 'test-photo-3',
        originalName: 'electrical_issue_003.jpg',
        caption: 'Electrical wiring issue',
        description: 'Issue with electrical connection needs attention',
        capturedAt: '2025-01-21T10:45:00Z',
        category: 'issue',
        location: {
          building: 'Main Building',
          floor: 'Ground Floor',
          room: 'Executive Kitchen',
          area: 'Electrical Panel'
        },
        project: {
          id: testProjectId,
          workCategory: 'Electric'
        },
        tags: ['issue', 'electrical', 'action-required'],
        url: 'test-url-3',
        thumbnail: 'test-thumbnail-3'
      }
    ];
  });

  describe('SmartTemplateService Integration', () => {
    test('should generate smart report with analysis', async () => {
      const result = await smartTemplateService.generateSmartReport(
        testProjectId,
        testPhotos,
        'auto'
      );

      expect(result.success).toBe(true);
      expect(result.reportStructure).toBeDefined();
      expect(result.analysisResult).toBeDefined();
      expect(result.template).toBeDefined();

      // Verify analysis results
      expect(result.analysisResult.totalPhotos).toBe(3);
      expect(result.analysisResult.locations).toBeDefined();
      expect(result.analysisResult.workCategories).toBeDefined();
      expect(result.analysisResult.confidence).toBeGreaterThan(0);
    });

    test('should select appropriate template based on photo content', async () => {
      // Test with progress photos
      const progressPhotos = testPhotos.filter(p => p.category === 'progress');
      const progressResult = await smartTemplateService.generateSmartReport(
        testProjectId,
        progressPhotos,
        'auto'
      );

      expect(progressResult.template.id).toBe('smart-progress');

      // Test with quality photos
      const qualityPhotos = testPhotos.filter(p => p.category === 'quality');
      const qualityResult = await smartTemplateService.generateSmartReport(
        testProjectId,
        qualityPhotos,
        'auto'
      );

      expect(qualityResult.template.id).toBe('smart-quality');
    });

    test('should generate proper report structure', async () => {
      const result = await smartTemplateService.generateSmartReport(
        testProjectId,
        testPhotos,
        'smart-progress'
      );

      const structure = result.reportStructure;
      expect(structure.id).toBeDefined();
      expect(structure.projectId).toBe(testProjectId);
      expect(structure.title).toBeDefined();
      expect(structure.sections).toBeInstanceOf(Array);
      expect(structure.sections.length).toBeGreaterThan(0);

      // Verify metadata
      expect(structure.metadata.autoGenerated).toBe(true);
      expect(structure.metadata.generationMethod).toBe('smart-template');
      expect(structure.metadata.reportNumber).toBeDefined();
    });
  });

  describe('AutoReportService Integration', () => {
    test('should generate report from photos successfully', async () => {
      const result = await autoReportService.generateFromPhotos(
        testProjectId,
        testPhotos,
        {
          templateType: 'auto',
          includeSequences: true,
          includeMetadata: true
        }
      );

      expect(result.success).toBe(true);
      expect(result.report).toBeDefined();
      expect(result.generationInfo).toBeDefined();
      expect(result.recommendations).toBeInstanceOf(Array);

      // Verify report was created in reportService
      const createdReport = await reportService.getReport(result.report.id);
      expect(createdReport).toBeDefined();
      expect(createdReport.metadata.autoGenerated).toBe(true);
    });

    test('should apply photo filters correctly', async () => {
      const result = await autoReportService.generateFromCriteria(
        testProjectId,
        {
          categories: ['progress'],
          workCategories: ['Millwork']
        }
      );

      expect(result.success).toBe(true);
      // Should only use progress photos from Millwork category
      expect(result.generationInfo.photoCount).toBeLessThanOrEqual(testPhotos.length);
    });

    test('should create progress updates with comparison', async () => {
      // First create a base report
      const baseResult = await autoReportService.generateFromPhotos(
        testProjectId,
        testPhotos.slice(0, 2)
      );

      // Then create a progress update with new photos
      const updateResult = await autoReportService.createProgressUpdate(
        testProjectId,
        [testPhotos[2]] // New photo
      );

      expect(updateResult.success).toBe(true);
      expect(updateResult.progressInsights).toBeDefined();
    });

    test('should generate time sequence reports', async () => {
      const result = await autoReportService.createTimeSequenceReports(
        testProjectId,
        'daily'
      );

      expect(result.success).toBe(true);
      expect(result.reports).toBeInstanceOf(Array);
      expect(result.sequenceType).toBe('daily');
    });
  });

  describe('Photo Service Integration', () => {
    test('should work with enhanced photo metadata', async () => {
      // Test uploading a photo with enhanced metadata
      const mockFile = new File(['test'], 'test.jpg', { type: 'image/jpeg' });
      const metadata = {
        projectId: testProjectId,
        category: 'progress',
        location: {
          building: 'Test Building',
          floor: 'Ground Floor',
          room: 'Test Room',
          area: 'Test Area'
        },
        workCategory: 'Construction',
        tags: ['test', 'integration']
      };

      const uploadedPhoto = await photoService.uploadPhoto(mockFile, metadata);
      
      expect(uploadedPhoto.id).toBeDefined();
      expect(uploadedPhoto.project.id).toBe(testProjectId);
      expect(uploadedPhoto.location.building).toBe('Test Building');
      expect(uploadedPhoto.tags).toContain('test');

      // Test integration with smart template service
      const smartResult = await smartTemplateService.generateSmartReport(
        testProjectId,
        [uploadedPhoto],
        'auto'
      );

      expect(smartResult.success).toBe(true);
    });

    test('should provide photo statistics for analysis', async () => {
      // Upload test photos to photo service
      for (const photo of testPhotos) {
        photoService.photos.set(photo.id, photo);
      }

      const stats = await photoService.getPhotoStats(testProjectId);
      
      expect(stats.totalPhotos).toBe(testPhotos.length);
      expect(stats.byCategory).toBeDefined();
      expect(stats.byLocation).toBeDefined();
      expect(stats.byWorkCategory).toBeDefined();

      // Verify integration with smart analysis
      const analysis = await smartTemplateService.analyzePhotos(testPhotos);
      expect(analysis.totalPhotos).toBe(stats.totalPhotos);
    });
  });

  describe('Report Service Integration', () => {
    test('should create reports compatible with existing system', async () => {
      const autoResult = await autoReportService.generateFromPhotos(
        testProjectId,
        testPhotos
      );

      const report = autoResult.report;

      // Test compatibility with existing report service methods
      const retrievedReport = await reportService.getReport(report.id);
      expect(retrievedReport).toBeDefined();
      expect(retrievedReport.id).toBe(report.id);

      // Test updating the auto-generated report
      const updatedReport = await reportService.updateReport(report.id, {
        title: 'Updated Auto Report'
      });
      expect(updatedReport.title).toBe('Updated Auto Report');

      // Test adding sections to auto-generated report
      const newSection = await reportService.addSection(report.id, {
        title: 'Manual Section',
        type: 'custom'
      });
      expect(newSection.title).toBe('Manual Section');
    });

    test('should maintain report structure consistency', async () => {
      const smartResult = await smartTemplateService.generateSmartReport(
        testProjectId,
        testPhotos,
        'smart-progress'
      );

      const reportStructure = smartResult.reportStructure;

      // Verify structure matches report service expectations
      expect(reportStructure.id).toBeDefined();
      expect(reportStructure.projectId).toBeDefined();
      expect(reportStructure.title).toBeDefined();
      expect(reportStructure.sections).toBeInstanceOf(Array);
      expect(reportStructure.metadata).toBeDefined();
      expect(reportStructure.exportSettings).toBeDefined();

      // Verify sections have proper structure
      reportStructure.sections.forEach(section => {
        expect(section.id).toBeDefined();
        expect(section.title).toBeDefined();
        expect(section.type).toBeDefined();
        expect(section.order).toBeDefined();
        expect(section.lines).toBeInstanceOf(Array);
      });
    });
  });

  describe('End-to-End Integration', () => {
    test('should complete full automation workflow', async () => {
      // Step 1: Upload photos with metadata
      const photos = [];
      for (let i = 0; i < testPhotos.length; i++) {
        const photo = testPhotos[i];
        photoService.photos.set(photo.id, photo);
        photos.push(photo);
      }

      // Step 2: Analyze photos and select template
      const analysis = await smartTemplateService.analyzePhotos(photos);
      expect(analysis.confidence).toBeGreaterThan(0);

      // Step 3: Generate smart report structure
      const smartResult = await smartTemplateService.generateSmartReport(
        testProjectId,
        photos,
        'auto'
      );
      expect(smartResult.success).toBe(true);

      // Step 4: Create actual report using auto service
      const autoResult = await autoReportService.generateFromPhotos(
        testProjectId,
        photos,
        { templateType: 'auto' }
      );
      expect(autoResult.success).toBe(true);

      // Step 5: Verify report in report service
      const finalReport = await reportService.getReport(autoResult.report.id);
      expect(finalReport).toBeDefined();
      expect(finalReport.metadata.autoGenerated).toBe(true);

      // Verify complete workflow metrics
      expect(finalReport.sections.length).toBeGreaterThan(0);
      expect(finalReport.projectId).toBe(testProjectId);
      expect(autoResult.generationInfo.photoCount).toBe(photos.length);
      expect(autoResult.recommendations).toBeInstanceOf(Array);
    });

    test('should handle error scenarios gracefully', async () => {
      // Test with empty photos
      await expect(
        autoReportService.generateFromPhotos(testProjectId, [])
      ).rejects.toThrow();

      // Test with invalid project ID
      await expect(
        autoReportService.generateFromPhotos('', testPhotos)
      ).rejects.toThrow();

      // Test with malformed photos
      const invalidPhotos = [{ id: 'invalid' }];
      await expect(
        smartTemplateService.generateSmartReport(testProjectId, invalidPhotos)
      ).rejects.toThrow();
    });
  });

  describe('Performance and Scalability', () => {
    test('should handle large photo collections efficiently', async () => {
      // Create a larger set of test photos
      const largePhotoSet = [];
      for (let i = 0; i < 50; i++) {
        largePhotoSet.push({
          ...testPhotos[i % testPhotos.length],
          id: `test-photo-large-${i}`,
          capturedAt: new Date(Date.now() - i * 60000).toISOString() // Spread over time
        });
      }

      const startTime = Date.now();
      const result = await autoReportService.generateFromPhotos(
        testProjectId,
        largePhotoSet
      );
      const endTime = Date.now();

      expect(result.success).toBe(true);
      expect(endTime - startTime).toBeLessThan(10000); // Should complete within 10 seconds
      expect(result.generationInfo.photoCount).toBe(50);
    });

    test('should provide generation metrics', async () => {
      const result = await autoReportService.generateFromPhotos(
        testProjectId,
        testPhotos
      );

      expect(result.generationInfo.generationTime).toBeDefined();
      expect(result.generationInfo.confidence).toBeDefined();
      expect(result.generationInfo.analysisResult).toBeDefined();
      expect(result.recommendations).toBeDefined();
    });
  });
});