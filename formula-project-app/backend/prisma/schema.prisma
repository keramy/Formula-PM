// Formula PM Prisma Schema
// Enterprise-grade project management database schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  admin
  project_manager
  designer
  craftsman
  coordinator
  client
}

// Project statuses enum
enum ProjectStatus {
  draft
  active
  on_tender
  on_hold
  completed
  cancelled
}

// Project types enum
enum ProjectType {
  commercial
  residential
  retail
  hospitality
  industrial
  healthcare
}

// Project priorities enum
enum ProjectPriority {
  low
  medium
  high
  urgent
}

// Task statuses enum
enum TaskStatus {
  pending
  in_progress
  review
  completed
  cancelled
}

// Client statuses enum
enum ClientStatus {
  active
  inactive
  archived
}

// Drawing statuses enum
enum DrawingStatus {
  draft
  pending
  approved
  revision_required
  rejected
}

// Material statuses enum
enum MaterialStatus {
  pending
  pending_approval
  approved
  ordered
  in_stock
  delivered
  used
}

// Notification types enum
enum NotificationType {
  task_assigned
  task_completed
  project_update
  deadline_reminder
  drawing_approved
  material_delivered
  system_alert
}

// Audit actions enum
enum AuditAction {
  create
  update
  delete
  view
  approve
  reject
}

// Users model
model User {
  id               String    @id @default(uuid()) @db.Uuid
  email            String    @unique @db.VarChar(255)
  passwordHash     String    @map("password_hash") @db.VarChar(255)
  firstName        String    @map("first_name") @db.VarChar(100)
  lastName         String    @map("last_name") @db.VarChar(100)
  role             UserRole  @default(craftsman)
  position         String?   @db.VarChar(100)
  department       String?   @db.VarChar(100)
  phone            String?   @db.VarChar(20)
  avatarUrl        String?   @map("avatar_url")
  status           String    @default("active") @db.VarChar(20)
  joinDate         DateTime  @default(now()) @map("join_date") @db.Date
  skills           String[]
  certifications   String[]
  emailVerified    Boolean   @default(false) @map("email_verified")
  lastLoginAt      DateTime? @map("last_login_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  createdProjects     Project[]             @relation("ProjectCreator")
  managedProjects     Project[]             @relation("ProjectManager")
  assignedTasks       Task[]                @relation("TaskAssignee")
  createdTasks        Task[]                @relation("TaskCreator")
  teamMemberships     ProjectTeamMember[]
  notifications       Notification[]
  auditLogs           AuditLog[]
  userSessions        UserSession[]
  comments            Comment[]
  attachments         Attachment[]
  approvedDrawings    ShopDrawing[]         @relation("DrawingApprover")
  createdDrawings     ShopDrawing[]         @relation("DrawingCreator")
  createdMaterials    MaterialSpecification[] @relation("MaterialCreator")

  @@map("users")
}

// Clients model
model Client {
  id                 String       @id @default(uuid()) @db.Uuid
  name               String       @db.VarChar(200)
  companyName        String?      @map("company_name") @db.VarChar(200)
  contactPerson      String       @map("contact_person") @db.VarChar(200)
  email              String       @db.VarChar(255)
  phone              String?      @db.VarChar(20)
  address            String?
  type               ProjectType?
  industry           String?      @db.VarChar(100)
  status             ClientStatus @default(active)
  totalProjectValue  Decimal      @default(0) @map("total_project_value") @db.Decimal(12, 2)
  notes              String?
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  // Relations
  projects Project[]

  @@map("clients")
}

// Projects model
model Project {
  id                String          @id @default(uuid()) @db.Uuid
  name              String          @db.VarChar(200)
  description       String?
  type              ProjectType
  status            ProjectStatus   @default(draft)
  priority          ProjectPriority @default(medium)
  budget            Decimal?        @db.Decimal(12, 2)
  startDate         DateTime?       @map("start_date") @db.Date
  endDate           DateTime?       @map("end_date") @db.Date
  progress          Int             @default(0)
  location          String?         @db.VarChar(200)
  clientId          String          @map("client_id") @db.Uuid
  projectManagerId  String?         @map("project_manager_id") @db.Uuid
  createdBy         String          @map("created_by") @db.Uuid
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  // Relations
  client              Client                  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  projectManager      User?                   @relation("ProjectManager", fields: [projectManagerId], references: [id], onDelete: SetNull)
  creator             User                    @relation("ProjectCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  teamMembers         ProjectTeamMember[]
  tasks               Task[]
  scopeGroups         ScopeGroup[]
  scopeItems          ScopeItem[]
  shopDrawings        ShopDrawing[]
  materialSpecs       MaterialSpecification[]
  comments            Comment[]
  attachments         Attachment[]

  @@map("projects")
}

// Project team members junction table
model ProjectTeamMember {
  projectId  String   @map("project_id") @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  role       String?  @db.VarChar(50)
  assignedAt DateTime @default(now()) @map("assigned_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@map("project_team_members")
}

// Tasks model
model Task {
  id             String      @id @default(uuid()) @db.Uuid
  projectId      String      @map("project_id") @db.Uuid
  name           String      @db.VarChar(200)
  title          String?     @db.VarChar(200) // For backward compatibility
  description    String?
  status         TaskStatus  @default(pending)
  priority       ProjectPriority @default(medium)
  assignedTo     String?     @map("assigned_to") @db.Uuid
  dueDate        DateTime?   @map("due_date") @db.Date
  estimatedHours Decimal?    @map("estimated_hours") @db.Decimal(5, 2)
  actualHours    Decimal?    @map("actual_hours") @db.Decimal(5, 2)
  progress       Int         @default(0)
  createdBy      String      @map("created_by") @db.Uuid
  completedAt    DateTime?   @map("completed_at")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee    User?       @relation("TaskAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)
  creator     User        @relation("TaskCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  comments    Comment[]
  attachments Attachment[]

  @@map("tasks")
}

// Scope groups model
model ScopeGroup {
  id          String      @id @default(uuid()) @db.Uuid
  projectId   String      @map("project_id") @db.Uuid
  name        String      @db.VarChar(200)
  description String?
  orderIndex  Int         @default(0) @map("order_index")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scopeItems ScopeItem[]

  @@map("scope_groups")
}

// Scope items model
model ScopeItem {
  id                   String                  @id @default(uuid()) @db.Uuid
  scopeGroupId         String                  @map("scope_group_id") @db.Uuid
  projectId            String                  @map("project_id") @db.Uuid
  name                 String                  @db.VarChar(200)
  description          String?
  status               TaskStatus              @default(pending)
  completionPercentage Int                     @default(0) @map("completion_percentage")
  orderIndex           Int                     @default(0) @map("order_index")
  estimatedCost        Decimal?                @map("estimated_cost") @db.Decimal(10, 2)
  actualCost           Decimal?                @map("actual_cost") @db.Decimal(10, 2)
  createdAt            DateTime                @default(now()) @map("created_at")
  updatedAt            DateTime                @updatedAt @map("updated_at")

  // Relations
  scopeGroup           ScopeGroup              @relation(fields: [scopeGroupId], references: [id], onDelete: Cascade)
  project              Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  shopDrawings         ShopDrawing[]
  materialSpecs        MaterialSpecification[]
  workflowConnections  WorkflowConnection[]

  @@map("scope_items")
}

// Shop drawings model
model ShopDrawing {
  id           String        @id @default(uuid()) @db.Uuid
  projectId    String        @map("project_id") @db.Uuid
  scopeItemId  String?       @map("scope_item_id") @db.Uuid
  fileName     String        @map("file_name") @db.VarChar(255)
  drawingType  String?       @map("drawing_type") @db.VarChar(100)
  room         String?       @db.VarChar(100)
  status       DrawingStatus @default(draft)
  version      String        @default("Rev A") @db.VarChar(20)
  filePath     String?       @map("file_path")
  fileSize     BigInt?       @map("file_size")
  uploadDate   DateTime      @default(now()) @map("upload_date") @db.Date
  approvedBy   String?       @map("approved_by") @db.Uuid
  approvedDate DateTime?     @map("approved_date") @db.Date
  comments     String?
  createdBy    String        @map("created_by") @db.Uuid
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Relations
  project             Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scopeItem           ScopeItem?           @relation(fields: [scopeItemId], references: [id], onDelete: SetNull)
  approver            User?                @relation("DrawingApprover", fields: [approvedBy], references: [id], onDelete: SetNull)
  creator             User                 @relation("DrawingCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  workflowConnections WorkflowConnection[]

  @@map("shop_drawings")
}

// Material specifications model
model MaterialSpecification {
  id          String         @id @default(uuid()) @db.Uuid
  projectId   String         @map("project_id") @db.Uuid
  scopeItemId String?        @map("scope_item_id") @db.Uuid
  itemId      String?        @map("item_id") @db.VarChar(50)
  description String
  category    String?        @db.VarChar(100)
  material    String?        @db.VarChar(100)
  finish      String?        @db.VarChar(100)
  quantity    Decimal        @db.Decimal(10, 2)
  unit        String         @db.VarChar(20)
  unitCost    Decimal        @map("unit_cost") @db.Decimal(8, 2)
  supplier    String?        @db.VarChar(200)
  leadTime    String?        @map("lead_time") @db.VarChar(50)
  status      MaterialStatus @default(pending)
  notes       String?
  createdBy   String         @map("created_by") @db.Uuid
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  // Relations
  project             Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scopeItem           ScopeItem?           @relation(fields: [scopeItemId], references: [id], onDelete: SetNull)
  creator             User                 @relation("MaterialCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  workflowConnections WorkflowConnection[]

  @@map("material_specifications")
}

// Workflow connections model
model WorkflowConnection {
  id             String                 @id @default(uuid()) @db.Uuid
  scopeItemId    String?                @map("scope_item_id") @db.Uuid
  shopDrawingId  String?                @map("shop_drawing_id") @db.Uuid
  materialSpecId String?                @map("material_spec_id") @db.Uuid
  connectionType String?                @map("connection_type") @db.VarChar(50)
  status         String                 @default("active") @db.VarChar(50)
  notes          String?
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")

  // Relations
  scopeItem    ScopeItem?             @relation(fields: [scopeItemId], references: [id], onDelete: Cascade)
  shopDrawing  ShopDrawing?           @relation(fields: [shopDrawingId], references: [id], onDelete: Cascade)
  materialSpec MaterialSpecification? @relation(fields: [materialSpecId], references: [id], onDelete: Cascade)

  @@map("workflow_connections")
}

// Notifications model
model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @map("user_id") @db.Uuid
  type      NotificationType
  title     String           @db.VarChar(200)
  message   String
  readStatus Boolean         @default(false) @map("read_status")
  data      Json?            @db.JsonB
  expiresAt DateTime?        @map("expires_at")
  createdAt DateTime         @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Audit logs model
model AuditLog {
  id            String      @id @default(uuid()) @db.Uuid
  tableName     String      @map("table_name") @db.VarChar(100)
  recordId      String      @map("record_id") @db.Uuid
  action        AuditAction
  oldValues     Json?       @map("old_values") @db.JsonB
  newValues     Json?       @map("new_values") @db.JsonB
  changedFields String[]    @map("changed_fields")
  userId        String?     @map("user_id") @db.Uuid
  userEmail     String?     @map("user_email") @db.VarChar(255)
  ipAddress     String?     @map("ip_address")
  userAgent     String?     @map("user_agent")
  timestamp     DateTime    @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

// User sessions model
model UserSession {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  tokenHash  String   @unique @map("token_hash") @db.VarChar(255)
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  lastUsedAt DateTime @default(now()) @map("last_used_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Comments model
model Comment {
  id         String    @id @default(uuid()) @db.Uuid
  entityType String    @map("entity_type") @db.VarChar(50)
  entityId   String    @map("entity_id") @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  content    String
  parentId   String?   @map("parent_id") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[]  @relation("CommentReplies")
  project  Project?   @relation(fields: [entityId], references: [id], onDelete: Cascade, map: "comments_project_fkey")
  task     Task?      @relation(fields: [entityId], references: [id], onDelete: Cascade, map: "comments_task_fkey")

  @@map("comments")
}

// Attachments model
model Attachment {
  id         String   @id @default(uuid()) @db.Uuid
  entityType String   @map("entity_type") @db.VarChar(50)
  entityId   String   @map("entity_id") @db.Uuid
  fileName   String   @map("file_name") @db.VarChar(255)
  filePath   String   @map("file_path")
  fileSize   BigInt?  @map("file_size")
  mimeType   String?  @map("mime_type") @db.VarChar(100)
  uploadedBy String   @map("uploaded_by") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  uploader User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  project  Project? @relation(fields: [entityId], references: [id], onDelete: Cascade, map: "attachments_project_fkey")
  task     Task?    @relation(fields: [entityId], references: [id], onDelete: Cascade, map: "attachments_task_fkey")

  @@map("attachments")
}