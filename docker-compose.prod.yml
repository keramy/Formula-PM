# Formula PM - Production Docker Compose Configuration
# Optimized for production deployment with security and performance

version: '3.8'

services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: formula-pm-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-formula_pm}
      POSTGRES_USER: ${POSTGRES_USER:-formula_pm}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - formula-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-formula_pm} -d ${POSTGRES_DB:-formula_pm}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache - Production with persistence
  redis:
    image: redis:7-alpine
    container_name: formula-pm-redis-prod
    volumes:
      - redis_prod_data:/data
      - ./formula-project-app/docker/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - formula-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API - Production
  backend:
    build:
      context: ./formula-project-app/backend
      dockerfile: Dockerfile
      target: runtime
    container_name: formula-pm-backend-prod
    environment:
      NODE_ENV: production
      PORT: 5014
      SOCKET_PORT: 5015
      DATABASE_URL: postgresql://${POSTGRES_USER:-formula_pm}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-formula_pm}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://formulapm.com}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
      - backend_reports:/app/generated-reports
    networks:
      - formula-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5014/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Frontend - Production with Nginx
  frontend:
    build:
      context: ./formula-project-app
      dockerfile: Dockerfile
      target: runtime
    container_name: formula-pm-frontend-prod
    environment:
      NODE_ENV: production
    ports:
      - "3003:3003"
    networks:
      - formula-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Load Balancer (optional for scaling)
  nginx-lb:
    image: nginx:alpine
    container_name: formula-pm-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./formula-project-app/docker/nginx-lb.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - formula-network
    depends_on:
      - frontend
    restart: unless-stopped
    profiles: ["load-balancer"]

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: formula-pm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - formula-network
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: formula-pm-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - formula-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["monitoring"]

networks:
  formula-network:
    driver: bridge
    name: formula-pm-network-prod

volumes:
  postgres_prod_data:
    name: formula-pm-postgres-prod
  redis_prod_data:
    name: formula-pm-redis-prod
  backend_logs:
    name: formula-pm-backend-logs-prod
  backend_uploads:
    name: formula-pm-backend-uploads-prod
  backend_reports:
    name: formula-pm-backend-reports-prod
  prometheus_data:
    name: formula-pm-prometheus-data
  grafana_data:
    name: formula-pm-grafana-data