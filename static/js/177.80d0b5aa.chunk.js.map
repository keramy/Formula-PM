{"version":3,"file":"static/js/177.80d0b5aa.chunk.js","mappings":"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","sources":["features/projects/components/ProjectForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  Box,\r\n  Alert,\r\n  FormControl,\r\n  InputLabel,\r\n  Select\r\n} from '@mui/material';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\n\r\nconst projectTypes = [\r\n  { value: 'general-contractor', label: 'General Contractor' },\r\n  { value: 'millwork', label: 'Millwork' },\r\n  { value: 'electrical', label: 'Electrical' },\r\n  { value: 'mep', label: 'MEP' },\r\n  { value: 'management', label: 'Management' }\r\n];\r\n\r\nconst projectStatuses = [\r\n  { value: 'on-tender', label: 'On Tender' },\r\n  { value: 'awarded', label: 'Awarded' },\r\n  { value: 'on-hold', label: 'On Hold' },\r\n  { value: 'not-awarded', label: 'Not Awarded' },\r\n  { value: 'active', label: 'Active' },\r\n  { value: 'completed', label: 'Completed' }\r\n];\r\n\r\nfunction ProjectForm({ onSubmit, clients = [], initialProject = null }) {\r\n  const [formData, setFormData] = useState(\r\n    initialProject ? {\r\n      name: initialProject.name || '',\r\n      type: initialProject.type || '',\r\n      startDate: initialProject.startDate ? new Date(initialProject.startDate) : null,\r\n      endDate: initialProject.endDate ? new Date(initialProject.endDate) : null,\r\n      clientId: initialProject.clientId || '',\r\n      status: initialProject.status || 'on-tender',\r\n      description: initialProject.description || ''\r\n    } : {\r\n      name: '',\r\n      type: '',\r\n      startDate: null,\r\n      endDate: null,\r\n      clientId: '',\r\n      status: 'on-tender',\r\n      description: ''\r\n    }\r\n  );\r\n  const [errors, setErrors] = useState({});\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleChange = (field) => (event) => {\r\n    setFormData({\r\n      ...formData,\r\n      [field]: event.target.value\r\n    });\r\n    if (errors[field]) {\r\n      setErrors({\r\n        ...errors,\r\n        [field]: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (field) => (date) => {\r\n    setFormData({\r\n      ...formData,\r\n      [field]: date\r\n    });\r\n    if (errors[field]) {\r\n      setErrors({\r\n        ...errors,\r\n        [field]: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n\r\n    if (!formData.name.trim()) {\r\n      newErrors.name = 'Project name is required';\r\n    }\r\n\r\n    if (!formData.type) {\r\n      newErrors.type = 'Project type is required';\r\n    }\r\n\r\n    if (!formData.startDate) {\r\n      newErrors.startDate = 'Start date is required';\r\n    }\r\n\r\n    if (!formData.endDate) {\r\n      newErrors.endDate = 'End date is required';\r\n    }\r\n\r\n    if (!formData.clientId) {\r\n      newErrors.clientId = 'Client selection is required';\r\n    }\r\n\r\n    if (formData.startDate && formData.endDate && formData.startDate >= formData.endDate) {\r\n      newErrors.endDate = 'End date must be after start date';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    \r\n    if (validateForm()) {\r\n      const submitData = {\r\n        ...formData,\r\n        startDate: formData.startDate.toISOString().split('T')[0],\r\n        endDate: formData.endDate.toISOString().split('T')[0]\r\n      };\r\n      \r\n      if (initialProject) {\r\n        submitData.id = initialProject.id;\r\n      }\r\n      \r\n      onSubmit(submitData);\r\n      \r\n      // Only clear form if creating new project\r\n      if (!initialProject) {\r\n        setFormData({\r\n          name: '',\r\n          type: '',\r\n          startDate: null,\r\n          endDate: null,\r\n          clientId: '',\r\n          status: 'on-tender',\r\n          description: ''\r\n        });\r\n      }\r\n      \r\n      setSuccess(true);\r\n      setTimeout(() => setSuccess(false), 3000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <Box component=\"form\" onSubmit={handleSubmit} sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n        {success && (\r\n          <Alert severity=\"success\">\r\n            Project created successfully!\r\n          </Alert>\r\n        )}\r\n        \r\n        <TextField\r\n          label=\"Project Name\"\r\n          value={formData.name}\r\n          onChange={handleChange('name')}\r\n          error={!!errors.name}\r\n          helperText={errors.name}\r\n          fullWidth\r\n          required\r\n        />\r\n\r\n        <TextField\r\n          select\r\n          label=\"Project Type\"\r\n          value={formData.type}\r\n          onChange={handleChange('type')}\r\n          error={!!errors.type}\r\n          helperText={errors.type}\r\n          fullWidth\r\n          required\r\n        >\r\n          {projectTypes.map((option) => (\r\n            <MenuItem key={option.value} value={option.value}>\r\n              {option.label}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n\r\n        <DatePicker\r\n          label=\"Start Date\"\r\n          value={formData.startDate}\r\n          onChange={handleDateChange('startDate')}\r\n          slotProps={{\r\n            textField: {\r\n              error: !!errors.startDate,\r\n              helperText: errors.startDate,\r\n              fullWidth: true,\r\n              required: true\r\n            }\r\n          }}\r\n        />\r\n\r\n        <DatePicker\r\n          label=\"End Date\"\r\n          value={formData.endDate}\r\n          onChange={handleDateChange('endDate')}\r\n          slotProps={{\r\n            textField: {\r\n              error: !!errors.endDate,\r\n              helperText: errors.endDate,\r\n              fullWidth: true,\r\n              required: true\r\n            }\r\n          }}\r\n        />\r\n\r\n        <FormControl fullWidth required error={!!errors.clientId}>\r\n          <InputLabel>Client</InputLabel>\r\n          <Select\r\n            value={formData.clientId}\r\n            onChange={handleChange('clientId')}\r\n            label=\"Client\"\r\n          >\r\n            {clients.map((client) => (\r\n              <MenuItem key={client.id} value={client.id}>\r\n                {client.companyName}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n          {errors.clientId && (\r\n            <Box sx={{ color: 'error.main', fontSize: '0.75rem', mt: 0.5, ml: 1.75 }}>\r\n              {errors.clientId}\r\n            </Box>\r\n          )}\r\n        </FormControl>\r\n\r\n        <FormControl fullWidth>\r\n          <InputLabel>Project Status</InputLabel>\r\n          <Select\r\n            value={formData.status}\r\n            onChange={handleChange('status')}\r\n            label=\"Project Status\"\r\n          >\r\n            {projectStatuses.map((status) => (\r\n              <MenuItem key={status.value} value={status.value}>\r\n                {status.label}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <TextField\r\n          label=\"Description\"\r\n          value={formData.description}\r\n          onChange={handleChange('description')}\r\n          multiline\r\n          rows={3}\r\n          fullWidth\r\n        />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          sx={{ mt: 2 }}\r\n        >\r\n          Create Project\r\n        </Button>\r\n      </Box>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n\r\nexport default ProjectForm;"],"names":["projectTypes","value","label","projectStatuses","_ref","onSubmit","clients","initialProject","formData","setFormData","useState","name","type","startDate","Date","endDate","clientId","status","description","errors","setErrors","success","setSuccess","handleChange","field","event","_objectSpread","target","handleDateChange","date","_jsx","LocalizationProvider","dateAdapter","AdapterDateFns","children","_jsxs","Box","component","preventDefault","validateForm","newErrors","trim","Object","keys","length","submitData","toISOString","split","id","setTimeout","sx","display","flexDirection","gap","Alert","severity","TextField","onChange","error","helperText","fullWidth","required","select","map","option","MenuItem","DatePicker","slotProps","textField","FormControl","InputLabel","Select","client","companyName","color","fontSize","mt","ml","multiline","rows","Button","variant","size"],"sourceRoot":""}