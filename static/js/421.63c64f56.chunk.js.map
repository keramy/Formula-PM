{"version":3,"file":"static/js/421.63c64f56.chunk.js","mappings":"4jBA8CA,MAAMA,EAAiB,CACrBC,IAAK,CACHC,MAAO,MACPC,MAAO,UACPC,QAAS,UACTC,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,KAEbC,OAAQ,CACNN,MAAO,SACPC,MAAO,UACPC,QAAS,UACTC,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,KAEbE,KAAM,CACJP,MAAO,OACPC,MAAO,UACPC,QAAS,UACTC,MAAMC,EAAAA,EAAAA,KAACI,EAAAA,EAAO,KAEhBC,OAAQ,CACNT,MAAO,SACPC,MAAO,UACPC,QAAS,UACTC,MAAMC,EAAAA,EAAAA,KAACM,EAAAA,EAAY,MAIjBC,EAAe,CACnBC,QAAS,CAAEZ,MAAO,QAASC,MAAO,UAAWC,QAAS,UAAWC,MAAMC,EAAAA,EAAAA,KAACS,EAAAA,EAAQ,KAChF,cAAe,CAAEb,MAAO,cAAeC,MAAO,UAAWC,QAAS,UAAWC,MAAMC,EAAAA,EAAAA,KAACU,EAAAA,EAAS,KAC7F,YAAe,CAAEd,MAAO,cAAeC,MAAO,UAAWC,QAAS,UAAWC,MAAMC,EAAAA,EAAAA,KAACU,EAAAA,EAAS,KAC7FC,UAAW,CAAEf,MAAO,YAAaC,MAAO,UAAWC,QAAS,UAAWC,MAAMC,EAAAA,EAAAA,KAACY,EAAAA,EAAW,MAomB3F,QAjmBA,SAA0BC,GAAwG,IAAvG,MAAEC,EAAK,SAAEC,EAAQ,YAAEC,EAAc,GAAE,aAAEC,EAAY,aAAEC,EAAY,UAAEC,EAAS,WAAEC,EAAU,WAAEC,GAAYR,EAC7H,MAAOS,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAAaC,IAAkBF,EAAAA,EAAAA,WAAS,IACxCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,IACtCK,EAAQC,IAAaN,EAAAA,EAAAA,UAAS,YAC9BO,EAAeC,IAAoBR,EAAAA,EAAAA,UAAS,QAC5CS,GAASC,KAAcV,EAAAA,EAAAA,UAAS,CACrCW,OAAQ,GACRC,SAAU,GACVC,QAAS,GACTC,SAAU,GACVC,YAAa,KACbC,UAAW,OAIPC,GAAe,CACnB,CACEC,IAAK,SACL9C,MAAO,SACP+C,KAAM,SACNC,QAAS,CACP,CAAEC,MAAO,UAAWjD,MAAO,SAC3B,CAAEiD,MAAO,cAAejD,MAAO,eAC/B,CAAEiD,MAAO,YAAajD,MAAO,eAGjC,CACE8C,IAAK,WACL9C,MAAO,WACP+C,KAAM,SACNC,QAAS,CACP,CAAEC,MAAO,MAAOjD,MAAO,OACvB,CAAEiD,MAAO,SAAUjD,MAAO,UAC1B,CAAEiD,MAAO,OAAQjD,MAAO,QACxB,CAAEiD,MAAO,SAAUjD,MAAO,YAG9B,CACE8C,IAAK,UACL9C,MAAO,UACP+C,KAAM,SACNC,QAAS7B,EAAS+B,KAAIC,IAAC,CAAOF,MAAOE,EAAEC,GAAIpD,MAAOmD,EAAEE,UAEtD,CACEP,IAAK,WACL9C,MAAO,WACP+C,KAAM,SACNC,QAAS5B,EAAY8B,KAAII,IAAE,CAAOL,MAAOK,EAAGF,GAAIpD,MAAOsD,EAAGC,eAKxDC,GAAe,CACnB,CAAEV,IAAK,UAAW9C,MAAO,gBAAiBqC,QAAS,CAAEE,OAAQ,GAAIK,UAAW,IAAIa,OAChF,CAAEX,IAAK,QAAS9C,MAAO,YAAaqC,QAAS,CAAEM,YAAa,IAAIc,KAAQb,UAAW,IAAIa,OACvF,CAAEX,IAAK,SAAU9C,MAAO,eAAgBqC,QAAS,CAAEG,SAAU,WAC7D,CAAEM,IAAK,YAAa9C,MAAO,YAAaqC,QAAS,CAAEE,OAAQ,eAIvDmB,IAAyBC,EAAAA,EAAAA,UAAQ,KACrC,IAAIC,EAAW1C,EAAM2C,QAAOC,IAAS,IAADC,EAElC,MAAMC,EAActC,EAAYuC,cAC1BC,GAAiBxC,GACrBoC,EAAKT,KAAKY,cAAcE,SAASH,KACjB,QAD6BD,EAC7CD,EAAKM,mBAAW,IAAAL,OAAA,EAAhBA,EAAkBE,cAAcE,SAASH,IAGrCK,GAAiBhC,GAAQE,QAAUuB,EAAKvB,SAAWF,GAAQE,OAG3D+B,GAAmBjC,GAAQG,UAAYsB,EAAKtB,WAAaH,GAAQG,SAGjE+B,GAAkBlC,GAAQI,SAAWqB,EAAKU,YAAcnC,GAAQI,QAGhEgC,GAAmBpC,GAAQK,UAAYoB,EAAKY,aAAerC,GAAQK,SAEzE,OAAOwB,GAAiBG,GAAiBC,GAClCC,GAAkBE,KA8B3B,OA1BAb,EAASe,MAAK,CAACC,EAAGC,KAChB,IAAIC,EAAQC,EAEZ,OAAQ9C,GACN,IAAK,OACH6C,EAASF,EAAEvB,KAAKY,cAChBc,EAASF,EAAExB,KAAKY,cAChB,MACF,IAAK,UACHa,EAAS,IAAIrB,KAAKmB,EAAEI,SACpBD,EAAS,IAAItB,KAAKoB,EAAEG,SACpB,MACF,IAAK,WACH,MAAMC,EAAgB,CAAElF,IAAK,EAAGO,OAAQ,EAAGC,KAAM,EAAGE,OAAQ,GAC5DqE,EAASG,EAAcL,EAAEpC,UACzBuC,EAASE,EAAcJ,EAAErC,UACzB,MACF,QACE,OAAO,EAGX,OAAIsC,EAASC,EAAiC,QAAlB5C,GAA2B,EAAI,EACvD2C,EAASC,EAAiC,QAAlB5C,EAA0B,GAAK,EACpD,KAGFyB,IACN,CAAC1C,EAAOQ,EAAaW,GAASJ,EAAQE,IAGnC+C,IAAgBvB,EAAAA,EAAAA,UAAQ,KAC5B,MAAMwB,EAAU,CACdvE,QAAS,GACT,cAAe,GACfG,UAAW,IAYb,OATA2C,GAAuB0B,SAAQtB,IAC7B,MAAMvB,EAAyB,gBAAhBuB,EAAKvB,OAA2B,cAAgBuB,EAAKvB,OAChE4C,EAAQ5C,GACV4C,EAAQ5C,GAAQ8C,KAAKvB,GAErBqB,EAAQvE,QAAQyE,KAAKvB,MAIlBqB,IACN,CAACzB,KAGE4B,GAAgBC,OAAOC,QAAQnD,IAClCwB,QAAO4B,IAAmB,IAAjB3C,EAAKG,GAAMwC,EACnB,MAAqB,kBAAVxC,EAAqC,KAAVA,EACrB,OAAVA,QAA4ByC,IAAVzC,KAE1BC,KAAIyC,IAAmB,IAAjB7C,EAAKG,GAAM0C,EACZ3F,EAAQ8C,EAAI8C,OAAO,GAAGC,cAAgB/C,EAAIgD,MAAM,GAAGC,QAAQ,WAAY,OACvEC,EAAe/C,EAEnB,GAAY,YAARH,EAAmB,CACrB,MAAML,EAAUtB,EAAS8E,MAAK9C,GAAKA,EAAEC,KAAOH,IAC5C+C,EAAevD,EAAUA,EAAQY,KAAOJ,CAC1C,MAAO,GAAY,aAARH,EAAoB,CAC7B,MAAMoD,EAAS9E,EAAY6E,MAAK3C,GAAMA,EAAGF,KAAOH,IAChD+C,EAAeE,EAASA,EAAO3C,SAAWN,CAC5C,CAEA,MAAO,CAAEH,MAAK9C,QAAOiD,MAAO+C,MAG1BG,GAAcC,GACL,IAAI3C,KAAK2C,GACVC,mBAAmB,QAAS,CACtCC,KAAM,UACNC,MAAO,QACPC,IAAK,YAIHC,GAAYA,CAACzB,EAASzC,KAC1B,GAAe,cAAXA,EAAwB,OAAO,EACnC,MAAMmE,EAAQ,IAAIjD,KAElB,OADAiD,EAAMC,SAAS,EAAG,EAAG,EAAG,GACjB,IAAIlD,KAAKuB,GAAW0B,GAgBvBE,GAAqBA,KACzBtE,GAAW,CACTC,OAAQ,GACRC,SAAU,GACVC,QAAS,GACTC,SAAU,GACVC,YAAa,KACbC,UAAW,QAITiE,GAAqB/D,IACb,QAARA,EACF8D,KAEAtE,IAAWwE,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE,CAAChE,GAAM,QAQpCkE,GAAeA,MACnBC,EAAAA,EAAAA,IAAmBvD,GAAwBvC,EAAUC,IAGjD8F,GAAsBC,IAC1B9F,EAAa8F,EAAQ,CACnB5E,OAAQ,YACR6E,aAAa,IAAI3D,MAAO4D,iBAItBC,GAAkBH,IACtB9F,EAAa8F,EAAQ,CACnB5E,OAAQ,UACR6E,YAAa,QA4TjB,OAAqB,IAAjBlG,EAAMqG,QAENC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACFtH,EAAAA,EAAAA,KAACuH,EAAAA,EAAa,CACZC,MAAM,QACNlG,YAAaA,EACbmG,eAAgBlG,EAChBE,YAAaA,EACbiG,gBAAiBA,IAAMhG,GAAgBD,GACvCkG,mBAAoBzC,GAAciC,OAClCS,SAAUhB,GACViB,MAAO1G,EACP2G,cAAc,WACd5C,cAAeA,GACf6C,cAAetB,MAEjBW,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAEC,UAAW,SAAUC,GAAI,GAAIZ,SAAA,EACtCtH,EAAAA,EAAAA,KAACmI,EAAAA,EAAU,CAACH,GAAI,CAAEI,SAAU,GAAIvI,MAAO,iBAAkBwI,GAAI,MAC7DrI,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,QAAQ1I,MAAM,iBAAgByH,SAAC,yEASzDF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EAEFtH,EAAAA,EAAAA,KAACuH,EAAAA,EAAa,CACZC,MAAM,QACNlG,YAAaA,EACbmG,eAAgBlG,EAChBE,YAAaA,EACbiG,gBAAiBA,IAAMhG,GAAgBD,GACvCkG,mBAAoBzC,GAAciC,OAClCS,SAAUhB,GACViB,MAAO1G,EACP2G,cAAc,WACd5C,cAAeA,GACf6C,cAAetB,MAIjBzG,EAAAA,EAAAA,KAACwI,EAAAA,EAAc,CACbC,KAAMhH,EACNQ,QAASA,GACTyG,eApZqBC,CAACjG,EAAKG,KAC/BX,IAAWwE,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE,CAAChE,GAAMG,OAoZlC+F,eAAgBpC,GAChBqC,mBA/X0BC,IAC9B5G,IAAWwE,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAASoC,EAAY7G,YA+X1CQ,aAAcA,GACdW,aAAcA,MAIhBpD,EAAAA,EAAAA,KAACqH,EAAAA,EAAG,CAACW,GAAI,CAAEe,aAAc,EAAGC,YAAa,UAAWX,GAAI,GAAIf,UAC1DF,EAAAA,EAAAA,MAAC6B,EAAAA,EAAI,CAACpG,MAAOlB,EAAYuH,SAAUA,CAACC,EAAGC,IAAaxH,EAAcwH,GAAU9B,SAAA,EAC1EtH,EAAAA,EAAAA,KAACqJ,EAAAA,EAAG,CAACtJ,MAAMC,EAAAA,EAAAA,KAACsJ,EAAAA,EAAQ,IAAK1J,MAAM,UAC/BI,EAAAA,EAAAA,KAACqJ,EAAAA,EAAG,CAACtJ,MAAMC,EAAAA,EAAAA,KAACuJ,EAAAA,EAAU,IAAK3J,MAAM,WACjCI,EAAAA,EAAAA,KAACqJ,EAAAA,EAAG,CAACtJ,MAAMC,EAAAA,EAAAA,KAACwJ,EAAAA,EAAK,IAAK5J,MAAM,kBAKhB,IAAf+B,IAlRH3B,EAAAA,EAAAA,KAACyJ,EAAAA,EAAI,CAAAnC,SACFhE,GAAuBR,KAAKY,IAC3B,MAAMrB,EAAUtB,EAAS8E,MAAK9C,GAAKA,EAAEC,KAAOU,EAAKU,YAC3ChC,EAAW1C,EAAegE,EAAKtB,UAC/BsH,EAAUrD,GAAU3C,EAAKkB,QAASlB,EAAKvB,QACvCwH,EAAiB3I,EAAY6E,MAAKC,GAAUA,EAAO9C,KAAOU,EAAKY,aAC/DnC,EAAS5B,EAAamD,EAAKvB,SAAW5B,EAAaC,QAEzD,OACER,EAAAA,EAAAA,KAAC4J,EAAAA,SAAc,CAAAtC,UACbF,EAAAA,EAAAA,MAACyC,EAAAA,GAAQ,CACP7B,GAAI,CACF8B,WAAW,aAADC,OAAeL,EAAU,UAAYtH,EAASvC,OACxDmK,gBAAiBN,EAAU,UAAY,QACvCrB,GAAI,EACJ4B,aAAc,EACdC,UAAW,GACX5C,SAAA,EAEFtH,EAAAA,EAAAA,KAACmK,EAAAA,EAAc,CAAA7C,SACZqC,GACC3J,EAAAA,EAAAA,KAACoK,EAAAA,EAAM,CAACpC,GAAI,CAAEqC,QAASV,EAAeW,WAAYhD,SAC/CqC,EAAeY,YAGlBvK,EAAAA,EAAAA,KAACoK,EAAAA,EAAM,CAAA9C,UACLtH,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,SAKbxK,EAAAA,EAAAA,KAACyK,EAAAA,EAAY,CACXC,SACEtD,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQC,WAAY,SAAUC,IAAK,GAAIvD,SAAA,EACzDtH,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,YAAYP,GAAI,CAAE8C,WAAY,KAAMxD,SACrD5D,EAAKT,QAERjD,EAAAA,EAAAA,KAAC+K,EAAAA,EAAI,CACHnL,MAAOwC,EAASxC,MAChBoL,KAAK,QACLhD,GAAI,CACFgC,gBAAiB5H,EAAStC,QAC1BD,MAAOuC,EAASvC,MAChBuI,SAAU,aAGdpI,EAAAA,EAAAA,KAAC+K,EAAAA,EAAI,CACHnL,MAAOuC,EAAOvC,MACdoL,KAAK,QACLhD,GAAI,CACFgC,gBAAiB7H,EAAOrC,QACxBD,MAAOsC,EAAOtC,MACduI,SAAU,YAGbsB,IACC1J,EAAAA,EAAAA,KAAC+K,EAAAA,EAAI,CACHnL,MAAM,UACNoL,KAAK,QACLhD,GAAI,CACFgC,gBAAiB,UACjBnK,MAAO,UACPuI,SAAU,eAMpB6C,WACE7D,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACFF,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAQ1I,MAAM,iBAAgByH,SAAA,CAAC,YACvCjF,EAAUA,EAAQY,KAAO,sBAErCmE,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAQ1I,MAAM,iBAAgByH,SAAA,CAAC,gBACnCqC,EAAiBA,EAAexG,SAAW,iBAE3DiE,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAQ1I,MAAO6J,EAAU,QAAU,iBAAiBpC,SAAA,CAAC,QACjEvB,GAAWrC,EAAKkB,kBAM9B5E,EAAAA,EAAAA,KAACkL,EAAAA,EAAuB,CAAA5D,UACtBF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQE,IAAK,IAAMvD,SAAA,EACrCtH,EAAAA,EAAAA,KAACmL,EAAAA,EAAU,CACTH,KAAK,QACLI,QAASA,IAAM/J,GAAcA,EAAWqC,GAAM4D,UAE9CtH,EAAAA,EAAAA,KAACqL,EAAAA,EAAQ,CAACjD,SAAS,YAEJ,cAAhB1E,EAAKvB,QACJnC,EAAAA,EAAAA,KAACmL,EAAAA,EAAU,CACTH,KAAK,QACLnL,MAAM,UACNuL,QAASA,IAAMlE,GAAexD,EAAKV,IAAIsE,UAEvCtH,EAAAA,EAAAA,KAACsL,EAAAA,EAAI,CAAClD,SAAS,aAGjBpI,EAAAA,EAAAA,KAACmL,EAAAA,EAAU,CACTH,KAAK,QACLnL,MAAM,UACNuL,QAASA,IAAMtE,GAAmBpD,EAAKV,IAAIsE,UAE3CtH,EAAAA,EAAAA,KAACY,EAAAA,EAAW,CAACwH,SAAS,aAG1BpI,EAAAA,EAAAA,KAACmL,EAAAA,EAAU,CACTH,KAAK,QACLnL,MAAM,QACNuL,QAASA,KAAMG,OArNPxE,EAqNwBrD,EAAKV,GArNrBwI,EAqNyB9H,EAAKT,UApN1DwI,OAAOC,QAAQ,oCAAD3B,OAAqCyB,EAAQ,QAC7DtK,EAAa6F,IAFQwE,IAACxE,EAAQyE,GAqNoClE,UAEpDtH,EAAAA,EAAAA,KAAC2L,EAAAA,EAAM,CAACvD,SAAS,qBAxGN1E,EAAKV,SA0Qd,IAAfrB,IArJH3B,EAAAA,EAAAA,KAAC4L,EAAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAExE,SACxBnC,OAAOC,QAAQN,IAAehC,KAAIiJ,IAA4B,IAA1B5J,EAAQ6J,GAAYD,EACvD,MAAME,EAAa1L,EAAa4B,IAAW5B,EAAaC,QACxD,OACER,EAAAA,EAAAA,KAAC4L,EAAAA,EAAI,CAACM,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAE9E,UACvBF,EAAAA,EAAAA,MAACiF,EAAAA,EAAK,CAACrE,GAAI,CAAEjF,EAAG,EAAGuJ,UAAW,KAAMhF,SAAA,EAClCF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQC,WAAY,SAAUC,IAAK,EAAGxC,GAAI,GAAIf,SAAA,CAC/D2E,EAAWlM,MACZC,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,KAAKP,GAAI,CAAE8C,WAAY,KAAMxD,SAC9C2E,EAAWrM,SAEdI,EAAAA,EAAAA,KAAC+K,EAAAA,EAAI,CACHnL,MAAOoM,EAAY7E,OACnB6D,KAAK,QACLhD,GAAI,CACFgC,gBAAiBiC,EAAWnM,QAC5BD,MAAOoM,EAAWpM,aAIxBG,EAAAA,EAAAA,KAACuM,EAAAA,EAAO,CAACvE,GAAI,CAAEK,GAAI,MACnBrI,EAAAA,EAAAA,KAACqH,EAAAA,EAAG,CAAAC,SACD0E,EAAYlJ,KAAIY,GAnPPA,KACtB,MAAMrB,EAAUtB,EAAS8E,MAAK9C,GAAKA,EAAEC,KAAOU,EAAKU,YAC3ChC,EAAW1C,EAAegE,EAAKtB,UAC/BsH,EAAUrD,GAAU3C,EAAKkB,QAASlB,EAAKvB,QACvCwH,EAAiB3I,EAAY6E,MAAKC,GAAUA,EAAO9C,KAAOU,EAAKY,aAErE,OACEtE,EAAAA,EAAAA,KAACwM,EAAAA,EAAI,CAEHxE,GAAI,CACFK,GAAI,EACJyB,WAAW,aAADC,OAAeL,EAAU,UAAYtH,EAASvC,OACxDmK,gBAAiBN,EAAU,UAAY,QACvC,UAAW,CACTQ,UAAW,IAEb5C,UAEFF,EAAAA,EAAAA,MAACqF,EAAAA,EAAW,CAACzE,GAAI,CAAEjF,EAAG,EAAG,eAAgB,CAAE2J,GAAI,IAAMpF,SAAA,EACnDtH,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,YAAYP,GAAI,CAAE8C,WAAY,IAAKzC,GAAI,GAAIf,SAC5D5D,EAAKT,QAGRmE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQC,WAAY,SAAUC,IAAK,EAAGxC,GAAI,GAAIf,SAAA,EAChEtH,EAAAA,EAAAA,KAAC+K,EAAAA,EAAI,CACHnL,MAAOwC,EAASxC,MAChBoL,KAAK,QACLhD,GAAI,CACFgC,gBAAiB5H,EAAStC,QAC1BD,MAAOuC,EAASvC,MAChBuI,SAAU,YAGbsB,IACC1J,EAAAA,EAAAA,KAAC+K,EAAAA,EAAI,CACHnL,MAAM,UACNoL,KAAK,QACLhD,GAAI,CACFgC,gBAAiB,UACjBnK,MAAO,UACPuI,SAAU,gBAMlBpI,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,QAAQ1I,MAAM,iBAAiBmI,GAAI,CAAEK,GAAI,GAAIf,SAC9DjF,EAAUA,EAAQY,KAAO,qBAG5BmE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQC,WAAY,SAAU+B,eAAgB,iBAAkBrF,SAAA,EAClFF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQC,WAAY,SAAUC,IAAK,GAAIvD,SAAA,CACxDqC,IACC3J,EAAAA,EAAAA,KAACoK,EAAAA,EAAM,CAACpC,GAAI,CAAE4E,MAAO,GAAIC,OAAQ,GAAIzE,SAAU,GAAIiC,QAASV,EAAeW,WAAYhD,SACpFqC,EAAeY,YAGpBvK,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,UAAU1I,MAAM,iBAAgByH,SACjDvB,GAAWrC,EAAKkB,eAIrBwC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQE,IAAK,IAAMvD,SAAA,EACrCtH,EAAAA,EAAAA,KAACmL,EAAAA,EAAU,CACTH,KAAK,QACLI,QAASA,IAAM/J,GAAcA,EAAWqC,GAAM4D,UAE9CtH,EAAAA,EAAAA,KAACqL,EAAAA,EAAQ,CAACjD,SAAS,YAEJ,cAAhB1E,EAAKvB,QACJnC,EAAAA,EAAAA,KAACmL,EAAAA,EAAU,CACTH,KAAK,QACLnL,MAAM,UACNuL,QAASA,IAAMlE,GAAexD,EAAKV,IAAIsE,UAEvCtH,EAAAA,EAAAA,KAACsL,EAAAA,EAAI,CAAClD,SAAS,aAGjBpI,EAAAA,EAAAA,KAACmL,EAAAA,EAAU,CACTH,KAAK,QACLnL,MAAM,UACNuL,QAASA,IAAMtE,GAAmBpD,EAAKV,IAAIsE,UAE3CtH,EAAAA,EAAAA,KAACY,EAAAA,EAAW,CAACwH,SAAS,sBA3E3B1E,EAAKV,KA2OuB8J,CAAepJ,WAlBfvB,QAkJnB,IAAfR,IArHHyF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAEjF,EAAG,GAAIuE,SAAA,EAChBtH,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,KAAKP,GAAI,CAAEK,GAAI,GAAIf,SAAC,uBAGxCtH,EAAAA,EAAAA,KAAC4L,EAAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAExE,SACxBhE,GAAuBR,KAAKY,IAC3B,MAAMrB,EAAUtB,EAAS8E,MAAK9C,GAAKA,EAAEC,KAAOU,EAAKU,YAC3ChC,EAAW1C,EAAegE,EAAKtB,UAC/BsH,EAAUrD,GAAU3C,EAAKkB,QAASlB,EAAKvB,QACvCwH,EAAiB3I,EAAY6E,MAAKC,GAAUA,EAAO9C,KAAOU,EAAKY,aAErE,OACEtE,EAAAA,EAAAA,KAAC4L,EAAAA,EAAI,CAACM,MAAI,EAACC,GAAI,GAAIY,GAAI,EAAGX,GAAI,EAAE9E,UAC9BtH,EAAAA,EAAAA,KAACwM,EAAAA,EAAI,CACHxE,GAAI,CACF8B,WAAW,aAADC,OAAeL,EAAU,UAAYtH,EAASvC,OACxDmK,gBAAiBN,EAAU,UAAY,SACvCpC,UAEFF,EAAAA,EAAAA,MAACqF,EAAAA,EAAW,CAAAnF,SAAA,EACVtH,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,YAAYP,GAAI,CAAE8C,WAAY,IAAKzC,GAAI,GAAIf,SAC5D5D,EAAKT,QAERjD,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,QAAQ1I,MAAM,iBAAiBmI,GAAI,CAAEK,GAAI,GAAIf,SAC9DjF,EAAUA,EAAQY,KAAO,qBAE5BmE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQC,WAAY,SAAUC,IAAK,EAAGxC,GAAI,GAAIf,SAAA,EAChEtH,EAAAA,EAAAA,KAACgN,EAAAA,EAAa,CAAC5E,SAAS,WACxBhB,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,QAAQ1I,MAAO6J,EAAU,QAAU,iBAAiBpC,SAAA,CAAC,QACjEvB,GAAWrC,EAAKkB,eAGzB+E,IACCvC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQC,WAAY,SAAUC,IAAK,GAAIvD,SAAA,EACzDtH,EAAAA,EAAAA,KAACoK,EAAAA,EAAM,CAACpC,GAAI,CAAE4E,MAAO,GAAIC,OAAQ,GAAIzE,SAAU,GAAIiC,QAASV,EAAeW,WAAYhD,SACpFqC,EAAeY,YAElBvK,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,QAAQ1I,MAAM,iBAAgByH,SAC/CqC,EAAexG,oBA1BUO,EAAKV,cA4GvD,C,oPCxpBA,MAsOA,EAtOuBnC,IAQhB,IARiB,KACtB4H,EAAI,QACJxG,EAAO,eACPyG,EAAc,eACdE,EAAc,mBACdC,EAAkB,aAClBpG,EAAY,aACZW,EAAe,IAChBvC,EACC,MAAM8H,EAAqBA,CAACjG,EAAKG,KAC/B6F,EAAehG,EAAKG,IAOhBoK,EAAqBC,IACzB,MAAM,IAAExK,EAAG,MAAE9C,EAAK,KAAE+C,EAAI,QAAEC,EAAO,YAAEuK,GAAgBD,EAC7CrK,EAAQZ,EAAQS,IAAQ,GAE9B,OAAQC,GACN,IAAK,SACH,OACEyE,EAAAA,EAAAA,MAACgG,EAAAA,EAAW,CAACC,WAAS,EAACrC,KAAK,QAAO1D,SAAA,EACjCtH,EAAAA,EAAAA,KAACsN,EAAAA,EAAU,CAAAhG,SAAE1H,KACbwH,EAAAA,EAAAA,MAACmG,EAAAA,EAAM,CACL1K,MAAOA,EACPqG,SAAWC,GAAMR,EAAmBjG,EAAKyG,EAAEqE,OAAO3K,OAClD4K,OAAOzN,EAAAA,EAAAA,KAAC0N,EAAAA,EAAa,CAAC9N,MAAOA,IAAU0H,SAAA,EAEvCF,EAAAA,EAAAA,MAACuG,EAAAA,EAAQ,CAAC9K,MAAM,GAAEyE,SAAA,CAAC,OAAK1H,KACvBgD,EAAQE,KAAK8K,IACZ5N,EAAAA,EAAAA,KAAC2N,EAAAA,EAAQ,CAAoB9K,MAAO+K,EAAO/K,MAAMyE,SAC9CsG,EAAOhO,OADKgO,EAAO/K,eAQhC,IAAK,cACH,OACEuE,EAAAA,EAAAA,MAACgG,EAAAA,EAAW,CAACC,WAAS,EAACrC,KAAK,QAAO1D,SAAA,EACjCtH,EAAAA,EAAAA,KAACsN,EAAAA,EAAU,CAAAhG,SAAE1H,KACbI,EAAAA,EAAAA,KAACuN,EAAAA,EAAM,CACLM,UAAQ,EACRhL,MAAOiL,MAAMC,QAAQlL,GAASA,EAAQ,GACtCqG,SAAWC,GAAMR,EAAmBjG,EAAKyG,EAAEqE,OAAO3K,OAClD4K,OAAOzN,EAAAA,EAAAA,KAAC0N,EAAAA,EAAa,CAAC9N,MAAOA,IAC7BoO,YAAcC,IACZjO,EAAAA,EAAAA,KAACqH,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQuD,SAAU,OAAQrD,IAAK,IAAMvD,SACtD2G,EAASnL,KAAKqL,IACb,MAAMP,EAAShL,EAAQiD,MAAKuI,GAAOA,EAAIvL,QAAUsL,IACjD,OACEnO,EAAAA,EAAAA,KAAC+K,EAAAA,EAAI,CAEHnL,MAAOgO,EAASA,EAAOhO,MAAQuO,EAC/BnD,KAAK,SAFAmD,QAOb7G,SAED1E,EAAQE,KAAK8K,IACZ5N,EAAAA,EAAAA,KAAC2N,EAAAA,EAAQ,CAAoB9K,MAAO+K,EAAO/K,MAAMyE,SAC9CsG,EAAOhO,OADKgO,EAAO/K,cAQhC,IAAK,OACH,OACE7C,EAAAA,EAAAA,KAACqO,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAejH,UAChDtH,EAAAA,EAAAA,KAACwO,EAAAA,EAAU,CACT5O,MAAOA,EACPiD,MAAOA,GAAS,KAChBqG,SAAWE,GAAaT,EAAmBjG,EAAK0G,GAChDqF,UAAW,CACTC,UAAW,CACT1D,KAAM,QACNqC,WAAW,QAOvB,IAAK,SACH,OACErN,EAAAA,EAAAA,KAAC2O,EAAAA,EAAS,CACRtB,WAAS,EACTrC,KAAK,QACLpL,MAAOA,EACP+C,KAAK,SACLE,MAAOA,EACPqG,SAAWC,GAAMR,EAAmBjG,EAAKyG,EAAEqE,OAAO3K,OAClDsK,YAAaA,IAKnB,QACE,OACEnN,EAAAA,EAAAA,KAAC2O,EAAAA,EAAS,CACRtB,WAAS,EACTrC,KAAK,QACLpL,MAAOA,EACPiD,MAAOA,EACPqG,SAAWC,GAAMR,EAAmBjG,EAAKyG,EAAEqE,OAAO3K,OAClDsK,YAAaA,MAMjByB,EAAwBA,IACrBzJ,OAAO0J,OAAO5M,GAASwB,QAAOZ,GAC/BiL,MAAMC,QAAQlL,GAAeA,EAAMsE,OAAS,EAC5CtE,aAAiBQ,MACJ,KAAVR,GAA0B,OAAVA,QAA4ByC,IAAVzC,IACxCsE,OAGL,OACEnH,EAAAA,EAAAA,KAAC8O,EAAAA,EAAQ,CAACC,GAAItG,EAAKnB,UACjBF,EAAAA,EAAAA,MAACiF,EAAAA,EAAK,CACJrE,GAAI,CACFjF,EAAG,EACHsF,GAAI,EACJ2B,gBAAiB,UACjBgF,OAAQ,EACRhG,YAAa,WACb1B,SAAA,EAEFF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQgC,eAAgB,gBAAiB/B,WAAY,SAAUvC,GAAI,GAAIf,SAAA,EACzFF,EAAAA,EAAAA,MAACkB,EAAAA,EAAU,CAACC,QAAQ,KAAK0G,UAAU,KAAI3H,SAAA,CAAC,YAC5BsH,IAAwB,eAEpC5O,EAAAA,EAAAA,KAACkP,EAAAA,EAAM,CACL3G,QAAQ,WACRyC,KAAK,QACLI,QAASxC,EACTuG,SAAsC,IAA5BP,IAA8BtH,SACzC,iBAMFlE,EAAa+D,OAAS,IACrBC,EAAAA,EAAAA,MAAAgI,EAAAA,SAAA,CAAA9H,SAAA,EACEtH,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,YAAYP,GAAI,CAAEK,GAAI,EAAGyC,WAAY,KAAMxD,SAAC,mBAGhEtH,EAAAA,EAAAA,KAACqH,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQuD,SAAU,OAAQrD,IAAK,EAAGxC,GAAI,GAAIf,SAC3DlE,EAAaN,KAAKgG,IACjB9I,EAAAA,EAAAA,KAAC+K,EAAAA,EAAI,CAEHnL,MAAOkJ,EAAYlJ,MACnBwL,QAASA,IAAMvC,EAAmBC,GAClCP,QAAQ,WACRyC,KAAK,QACLhD,GAAI,CAAE,UAAW,CAAEgC,gBAAiB,gBAAiBnK,MAAO,WALvDiJ,EAAYpG,UASvB1C,EAAAA,EAAAA,KAACuM,EAAAA,EAAO,CAACvE,GAAI,CAAEK,GAAI,SAKvBrI,EAAAA,EAAAA,KAAC4L,EAAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAExE,SACxB7E,EAAaK,KAAKoK,IACjBlN,EAAAA,EAAAA,KAAC4L,EAAAA,EAAI,CAACM,MAAI,EAACC,GAAI,GAAIY,GAAI,EAAGX,GAAI,EAAE9E,SAC7B2F,EAAkBC,IADiBA,EAAOxK,SAOhDkM,IAA0B,IACzBxH,EAAAA,EAAAA,MAAAgI,EAAAA,SAAA,CAAA9H,SAAA,EACEtH,EAAAA,EAAAA,KAACuM,EAAAA,EAAO,CAACvE,GAAI,CAAEqH,GAAI,MACnBrP,EAAAA,EAAAA,KAACsI,EAAAA,EAAU,CAACC,QAAQ,YAAYP,GAAI,CAAEK,GAAI,EAAGyC,WAAY,KAAMxD,SAAC,oBAGhEtH,EAAAA,EAAAA,KAACqH,EAAAA,EAAG,CAACW,GAAI,CAAE2C,QAAS,OAAQuD,SAAU,OAAQrD,IAAK,GAAIvD,SACpDnC,OAAOC,QAAQnD,GAASa,KAAIuC,IAAmB,IAAjB3C,EAAKG,GAAMwC,EACxC,GAAIyI,MAAMC,QAAQlL,IAA2B,IAAjBA,EAAMsE,OAAc,OAAO,KACvD,IAAKtE,GAAmB,KAAVA,EAAc,OAAO,KAEnC,MAAMqK,EAASzK,EAAaoD,MAAKyJ,GAAKA,EAAE5M,MAAQA,IAChD,IAAKwK,EAAQ,OAAO,KAEpB,IAAItH,EAAe/C,EACnB,GAAIiL,MAAMC,QAAQlL,GAChB+C,EAAe/C,EAAMC,KAAIyM,IAAM,IAADC,EAC5B,MAAM5B,EAAuB,QAAjB4B,EAAGtC,EAAOtK,eAAO,IAAA4M,OAAA,EAAdA,EAAgB3J,MAAKuI,GAAOA,EAAIvL,QAAU0M,IACzD,OAAO3B,EAASA,EAAOhO,MAAQ2P,KAC9BE,KAAK,WACH,GAAIvC,EAAOtK,QAAS,CACzB,MAAMgL,EAASV,EAAOtK,QAAQiD,MAAKuI,GAAOA,EAAIvL,QAAUA,IACxD+C,EAAegI,EAASA,EAAOhO,MAAQiD,CACzC,MAAWA,aAAiBQ,OAC1BuC,EAAe/C,EAAMoD,sBAGvB,OACEjG,EAAAA,EAAAA,KAAC+K,EAAAA,EAAI,CAEHnL,MAAK,GAAAmK,OAAKmD,EAAOtN,MAAK,MAAAmK,OAAKnE,GAC3B8J,SAAUA,IA1MDhN,KACzBgG,EAAehG,EAAK,KAyMY+D,CAAkB/D,GAClC7C,MAAM,UACN0I,QAAQ,WACRyC,KAAK,SALAtI,MAQRe,OAAOkM,mB","sources":["features/tasks/components/EnhancedTasksView.js","components/ui/UnifiedFilters.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Chip,\n  Button,\n  IconButton,\n  Grid,\n  Avatar,\n  LinearProgress,\n  Tabs,\n  Tab,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  Divider,\n  Paper,\n  Calendar\n} from '@mui/material';\nimport {\n  CheckCircle,\n  Delete,\n  Person,\n  CalendarToday,\n  Assignment,\n  Warning,\n  Undo,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  Schedule,\n  PlayArrow,\n  Flag,\n  Error,\n  PriorityHigh,\n  ViewList,\n  ViewModule,\n  Today\n} from '@mui/icons-material';\nimport UnifiedHeader from '../../../components/ui/UnifiedHeader';\nimport UnifiedFilters from '../../../components/ui/UnifiedFilters';\nimport { exportTasksToExcel } from '../../../services/export/excelExport';\n\nconst priorityConfig = {\n  low: {\n    label: 'Low',\n    color: '#27ae60',\n    bgColor: '#eafaf1',\n    icon: <Flag />\n  },\n  medium: {\n    label: 'Medium',\n    color: '#f39c12',\n    bgColor: '#fef9e7',\n    icon: <Flag />\n  },\n  high: {\n    label: 'High',\n    color: '#e67e22',\n    bgColor: '#fef5e7',\n    icon: <Warning />\n  },\n  urgent: {\n    label: 'Urgent',\n    color: '#e74c3c',\n    bgColor: '#fdf2f2',\n    icon: <PriorityHigh />\n  }\n};\n\nconst statusConfig = {\n  pending: { label: 'To Do', color: '#f39c12', bgColor: '#fef9e7', icon: <Schedule /> },\n  'in-progress': { label: 'In Progress', color: '#3498db', bgColor: '#ebf5fb', icon: <PlayArrow /> },\n  'in_progress': { label: 'In Progress', color: '#3498db', bgColor: '#ebf5fb', icon: <PlayArrow /> },\n  completed: { label: 'Completed', color: '#27ae60', bgColor: '#eafaf1', icon: <CheckCircle /> }\n};\n\nfunction EnhancedTasksView({ tasks, projects, teamMembers = [], onUpdateTask, onDeleteTask, onAddTask, onViewTask, onEditTask }) {\n  const [searchValue, setSearchValue] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [currentTab, setCurrentTab] = useState(0); // 0: List, 1: Board, 2: Calendar\n  const [sortBy, setSortBy] = useState('dueDate');\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [filters, setFilters] = useState({\n    status: '',\n    priority: '',\n    project: '',\n    assignee: '',\n    dueDateFrom: null,\n    dueDateTo: null\n  });\n\n  // Filter configuration for tasks\n  const filterConfig = [\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'pending', label: 'To Do' },\n        { value: 'in-progress', label: 'In Progress' },\n        { value: 'completed', label: 'Completed' }\n      ]\n    },\n    {\n      key: 'priority',\n      label: 'Priority',\n      type: 'select',\n      options: [\n        { value: 'low', label: 'Low' },\n        { value: 'medium', label: 'Medium' },\n        { value: 'high', label: 'High' },\n        { value: 'urgent', label: 'Urgent' }\n      ]\n    },\n    {\n      key: 'project',\n      label: 'Project',\n      type: 'select',\n      options: projects.map(p => ({ value: p.id, label: p.name }))\n    },\n    {\n      key: 'assignee',\n      label: 'Assignee',\n      type: 'select',\n      options: teamMembers.map(tm => ({ value: tm.id, label: tm.fullName }))\n    }\n  ];\n\n  // Quick filters for tasks\n  const quickFilters = [\n    { key: 'overdue', label: 'Overdue Tasks', filters: { status: '', dueDateTo: new Date() } },\n    { key: 'today', label: 'Due Today', filters: { dueDateFrom: new Date(), dueDateTo: new Date() } },\n    { key: 'urgent', label: 'Urgent Tasks', filters: { priority: 'urgent' } },\n    { key: 'completed', label: 'Completed', filters: { status: 'completed' } }\n  ];\n\n  // Filter and sort tasks\n  const filteredAndSortedTasks = useMemo(() => {\n    let filtered = tasks.filter(task => {\n      // Search filter\n      const searchLower = searchValue.toLowerCase();\n      const matchesSearch = !searchValue || \n        task.name.toLowerCase().includes(searchLower) ||\n        task.description?.toLowerCase().includes(searchLower);\n\n      // Status filter\n      const matchesStatus = !filters.status || task.status === filters.status;\n\n      // Priority filter\n      const matchesPriority = !filters.priority || task.priority === filters.priority;\n\n      // Project filter\n      const matchesProject = !filters.project || task.projectId === filters.project;\n\n      // Assignee filter\n      const matchesAssignee = !filters.assignee || task.assignedTo === filters.assignee;\n\n      return matchesSearch && matchesStatus && matchesPriority && \n             matchesProject && matchesAssignee;\n    });\n\n    // Sort tasks\n    filtered.sort((a, b) => {\n      let aValue, bValue;\n\n      switch (sortBy) {\n        case 'name':\n          aValue = a.name.toLowerCase();\n          bValue = b.name.toLowerCase();\n          break;\n        case 'dueDate':\n          aValue = new Date(a.dueDate);\n          bValue = new Date(b.dueDate);\n          break;\n        case 'priority':\n          const priorityOrder = { low: 1, medium: 2, high: 3, urgent: 4 };\n          aValue = priorityOrder[a.priority];\n          bValue = priorityOrder[b.priority];\n          break;\n        default:\n          return 0;\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  }, [tasks, searchValue, filters, sortBy, sortDirection]);\n\n  // Group tasks by status for board view\n  const tasksByStatus = useMemo(() => {\n    const grouped = {\n      pending: [],\n      'in-progress': [],\n      completed: []\n    };\n\n    filteredAndSortedTasks.forEach(task => {\n      const status = task.status === 'in_progress' ? 'in-progress' : task.status;\n      if (grouped[status]) {\n        grouped[status].push(task);\n      } else {\n        grouped.pending.push(task);\n      }\n    });\n\n    return grouped;\n  }, [filteredAndSortedTasks]);\n\n  // Get active filters for display\n  const activeFilters = Object.entries(filters)\n    .filter(([key, value]) => {\n      if (typeof value === 'string') return value !== '';\n      return value !== null && value !== undefined;\n    })\n    .map(([key, value]) => {\n      let label = key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1');\n      let displayValue = value;\n      \n      if (key === 'project') {\n        const project = projects.find(p => p.id === value);\n        displayValue = project ? project.name : value;\n      } else if (key === 'assignee') {\n        const member = teamMembers.find(tm => tm.id === value);\n        displayValue = member ? member.fullName : value;\n      }\n      \n      return { key, label, value: displayValue };\n    });\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { \n      year: 'numeric', \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  const isOverdue = (dueDate, status) => {\n    if (status === 'completed') return false;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return new Date(dueDate) < today;\n  };\n\n  const getDaysUntilDue = (dueDate) => {\n    const today = new Date();\n    const due = new Date(dueDate);\n    const diffTime = due - today;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  // Event handlers\n  const handleFilterChange = (key, value) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleClearFilters = () => {\n    setFilters({\n      status: '',\n      priority: '',\n      project: '',\n      assignee: '',\n      dueDateFrom: null,\n      dueDateTo: null\n    });\n  };\n\n  const handleClearFilter = (key) => {\n    if (key === 'all') {\n      handleClearFilters();\n    } else {\n      setFilters(prev => ({ ...prev, [key]: '' }));\n    }\n  };\n\n  const handleApplyQuickFilter = (quickFilter) => {\n    setFilters(prev => ({ ...prev, ...quickFilter.filters }));\n  };\n\n  const handleExport = () => {\n    exportTasksToExcel(filteredAndSortedTasks, projects, teamMembers);\n  };\n\n  const handleCompleteTask = (taskId) => {\n    onUpdateTask(taskId, { \n      status: 'completed',\n      completedAt: new Date().toISOString()\n    });\n  };\n\n  const handleUndoTask = (taskId) => {\n    onUpdateTask(taskId, { \n      status: 'pending',\n      completedAt: null\n    });\n  };\n\n  const handleDeleteTask = (taskId, taskName) => {\n    if (window.confirm(`Are you sure you want to delete \"${taskName}\"?`)) {\n      onDeleteTask(taskId);\n    }\n  };\n\n  // Render task card for board view\n  const renderTaskCard = (task) => {\n    const project = projects.find(p => p.id === task.projectId);\n    const priority = priorityConfig[task.priority];\n    const overdue = isOverdue(task.dueDate, task.status);\n    const assignedMember = teamMembers.find(member => member.id === task.assignedTo);\n\n    return (\n      <Card\n        key={task.id}\n        sx={{\n          mb: 1,\n          borderLeft: `4px solid ${overdue ? '#e74c3c' : priority.color}`,\n          backgroundColor: overdue ? '#fff5f5' : 'white',\n          '&:hover': {\n            boxShadow: 2\n          }\n        }}\n      >\n        <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>\n          <Typography variant=\"subtitle2\" sx={{ fontWeight: 600, mb: 1 }}>\n            {task.name}\n          </Typography>\n          \n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n            <Chip\n              label={priority.label}\n              size=\"small\"\n              sx={{\n                backgroundColor: priority.bgColor,\n                color: priority.color,\n                fontSize: '0.7rem'\n              }}\n            />\n            {overdue && (\n              <Chip\n                label=\"Overdue\"\n                size=\"small\"\n                sx={{\n                  backgroundColor: '#fdf2f2',\n                  color: '#e74c3c',\n                  fontSize: '0.7rem'\n                }}\n              />\n            )}\n          </Box>\n\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n            {project ? project.name : 'Unknown Project'}\n          </Typography>\n\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              {assignedMember && (\n                <Avatar sx={{ width: 24, height: 24, fontSize: 12, bgcolor: assignedMember.roleColor }}>\n                  {assignedMember.initials}\n                </Avatar>\n              )}\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {formatDate(task.dueDate)}\n              </Typography>\n            </Box>\n            \n            <Box sx={{ display: 'flex', gap: 0.5 }}>\n              <IconButton\n                size=\"small\"\n                onClick={() => onEditTask && onEditTask(task)}\n              >\n                <EditIcon fontSize=\"small\" />\n              </IconButton>\n              {task.status === 'completed' ? (\n                <IconButton\n                  size=\"small\"\n                  color=\"warning\"\n                  onClick={() => handleUndoTask(task.id)}\n                >\n                  <Undo fontSize=\"small\" />\n                </IconButton>\n              ) : (\n                <IconButton\n                  size=\"small\"\n                  color=\"success\"\n                  onClick={() => handleCompleteTask(task.id)}\n                >\n                  <CheckCircle fontSize=\"small\" />\n                </IconButton>\n              )}\n            </Box>\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  // Render list view\n  const renderListView = () => (\n    <List>\n      {filteredAndSortedTasks.map((task) => {\n        const project = projects.find(p => p.id === task.projectId);\n        const priority = priorityConfig[task.priority];\n        const overdue = isOverdue(task.dueDate, task.status);\n        const assignedMember = teamMembers.find(member => member.id === task.assignedTo);\n        const status = statusConfig[task.status] || statusConfig.pending;\n\n        return (\n          <React.Fragment key={task.id}>\n            <ListItem\n              sx={{\n                borderLeft: `4px solid ${overdue ? '#e74c3c' : priority.color}`,\n                backgroundColor: overdue ? '#fff5f5' : 'white',\n                mb: 1,\n                borderRadius: 1,\n                boxShadow: 1\n              }}\n            >\n              <ListItemAvatar>\n                {assignedMember ? (\n                  <Avatar sx={{ bgcolor: assignedMember.roleColor }}>\n                    {assignedMember.initials}\n                  </Avatar>\n                ) : (\n                  <Avatar>\n                    <Person />\n                  </Avatar>\n                )}\n              </ListItemAvatar>\n              \n              <ListItemText\n                primary={\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n                      {task.name}\n                    </Typography>\n                    <Chip\n                      label={priority.label}\n                      size=\"small\"\n                      sx={{\n                        backgroundColor: priority.bgColor,\n                        color: priority.color,\n                        fontSize: '0.7rem'\n                      }}\n                    />\n                    <Chip\n                      label={status.label}\n                      size=\"small\"\n                      sx={{\n                        backgroundColor: status.bgColor,\n                        color: status.color,\n                        fontSize: '0.7rem'\n                      }}\n                    />\n                    {overdue && (\n                      <Chip\n                        label=\"Overdue\"\n                        size=\"small\"\n                        sx={{\n                          backgroundColor: '#fdf2f2',\n                          color: '#e74c3c',\n                          fontSize: '0.7rem'\n                        }}\n                      />\n                    )}\n                  </Box>\n                }\n                secondary={\n                  <Box>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Project: {project ? project.name : 'Unknown Project'}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Assigned to: {assignedMember ? assignedMember.fullName : 'Unassigned'}\n                    </Typography>\n                    <Typography variant=\"body2\" color={overdue ? 'error' : 'text.secondary'}>\n                      Due: {formatDate(task.dueDate)}\n                    </Typography>\n                  </Box>\n                }\n              />\n              \n              <ListItemSecondaryAction>\n                <Box sx={{ display: 'flex', gap: 0.5 }}>\n                  <IconButton\n                    size=\"small\"\n                    onClick={() => onEditTask && onEditTask(task)}\n                  >\n                    <EditIcon fontSize=\"small\" />\n                  </IconButton>\n                  {task.status === 'completed' ? (\n                    <IconButton\n                      size=\"small\"\n                      color=\"warning\"\n                      onClick={() => handleUndoTask(task.id)}\n                    >\n                      <Undo fontSize=\"small\" />\n                    </IconButton>\n                  ) : (\n                    <IconButton\n                      size=\"small\"\n                      color=\"success\"\n                      onClick={() => handleCompleteTask(task.id)}\n                    >\n                      <CheckCircle fontSize=\"small\" />\n                    </IconButton>\n                  )}\n                  <IconButton\n                    size=\"small\"\n                    color=\"error\"\n                    onClick={() => handleDeleteTask(task.id, task.name)}\n                  >\n                    <Delete fontSize=\"small\" />\n                  </IconButton>\n                </Box>\n              </ListItemSecondaryAction>\n            </ListItem>\n          </React.Fragment>\n        );\n      })}\n    </List>\n  );\n\n  // Render board view\n  const renderBoardView = () => (\n    <Grid container spacing={2}>\n      {Object.entries(tasksByStatus).map(([status, statusTasks]) => {\n        const statusInfo = statusConfig[status] || statusConfig.pending;\n        return (\n          <Grid item xs={12} md={4} key={status}>\n            <Paper sx={{ p: 2, minHeight: 400 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\n                {statusInfo.icon}\n                <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                  {statusInfo.label}\n                </Typography>\n                <Chip\n                  label={statusTasks.length}\n                  size=\"small\"\n                  sx={{\n                    backgroundColor: statusInfo.bgColor,\n                    color: statusInfo.color\n                  }}\n                />\n              </Box>\n              <Divider sx={{ mb: 2 }} />\n              <Box>\n                {statusTasks.map(task => renderTaskCard(task))}\n              </Box>\n            </Paper>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n\n  // Render calendar view (simplified)\n  const renderCalendarView = () => (\n    <Box sx={{ p: 2 }}>\n      <Typography variant=\"h6\" sx={{ mb: 2 }}>\n        Tasks by Due Date\n      </Typography>\n      <Grid container spacing={2}>\n        {filteredAndSortedTasks.map((task) => {\n          const project = projects.find(p => p.id === task.projectId);\n          const priority = priorityConfig[task.priority];\n          const overdue = isOverdue(task.dueDate, task.status);\n          const assignedMember = teamMembers.find(member => member.id === task.assignedTo);\n\n          return (\n            <Grid item xs={12} sm={6} md={4} key={task.id}>\n              <Card\n                sx={{\n                  borderLeft: `4px solid ${overdue ? '#e74c3c' : priority.color}`,\n                  backgroundColor: overdue ? '#fff5f5' : 'white'\n                }}\n              >\n                <CardContent>\n                  <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, mb: 1 }}>\n                    {task.name}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n                    {project ? project.name : 'Unknown Project'}\n                  </Typography>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                    <CalendarToday fontSize=\"small\" />\n                    <Typography variant=\"body2\" color={overdue ? 'error' : 'text.secondary'}>\n                      Due: {formatDate(task.dueDate)}\n                    </Typography>\n                  </Box>\n                  {assignedMember && (\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <Avatar sx={{ width: 20, height: 20, fontSize: 12, bgcolor: assignedMember.roleColor }}>\n                        {assignedMember.initials}\n                      </Avatar>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {assignedMember.fullName}\n                      </Typography>\n                    </Box>\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n\n  if (tasks.length === 0) {\n    return (\n      <Box>\n        <UnifiedHeader\n          title=\"Tasks\"\n          searchValue={searchValue}\n          onSearchChange={setSearchValue}\n          showFilters={showFilters}\n          onToggleFilters={() => setShowFilters(!showFilters)}\n          activeFiltersCount={activeFilters.length}\n          onExport={handleExport}\n          onAdd={onAddTask}\n          addButtonText=\"Add Task\"\n          activeFilters={activeFilters}\n          onClearFilter={handleClearFilter}\n        />\n        <Box sx={{ textAlign: 'center', py: 4 }}>\n          <Assignment sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No tasks added yet. Create a project and add your first task!\n          </Typography>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Unified Header */}\n      <UnifiedHeader\n        title=\"Tasks\"\n        searchValue={searchValue}\n        onSearchChange={setSearchValue}\n        showFilters={showFilters}\n        onToggleFilters={() => setShowFilters(!showFilters)}\n        activeFiltersCount={activeFilters.length}\n        onExport={handleExport}\n        onAdd={onAddTask}\n        addButtonText=\"Add Task\"\n        activeFilters={activeFilters}\n        onClearFilter={handleClearFilter}\n      />\n\n      {/* Unified Filters */}\n      <UnifiedFilters\n        show={showFilters}\n        filters={filters}\n        onFilterChange={handleFilterChange}\n        onClearFilters={handleClearFilters}\n        onApplyQuickFilter={handleApplyQuickFilter}\n        filterConfig={filterConfig}\n        quickFilters={quickFilters}\n      />\n\n      {/* View Tabs */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>\n        <Tabs value={currentTab} onChange={(e, newValue) => setCurrentTab(newValue)}>\n          <Tab icon={<ViewList />} label=\"List\" />\n          <Tab icon={<ViewModule />} label=\"Board\" />\n          <Tab icon={<Today />} label=\"Calendar\" />\n        </Tabs>\n      </Box>\n\n      {/* Content based on selected tab */}\n      {currentTab === 0 && renderListView()}\n      {currentTab === 1 && renderBoardView()}\n      {currentTab === 2 && renderCalendarView()}\n    </Box>\n  );\n}\n\nexport default EnhancedTasksView;","import React from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  TextField,\n  MenuItem,\n  Button,\n  Chip,\n  Grid,\n  Collapse,\n  Divider,\n  FormControl,\n  InputLabel,\n  Select,\n  OutlinedInput\n} from '@mui/material';\nimport {\n  DatePicker\n} from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\nconst UnifiedFilters = ({\n  show,\n  filters,\n  onFilterChange,\n  onClearFilters,\n  onApplyQuickFilter,\n  filterConfig,\n  quickFilters = []\n}) => {\n  const handleFilterChange = (key, value) => {\n    onFilterChange(key, value);\n  };\n\n  const handleClearFilter = (key) => {\n    onFilterChange(key, '');\n  };\n\n  const renderFilterField = (config) => {\n    const { key, label, type, options, placeholder } = config;\n    const value = filters[key] || '';\n\n    switch (type) {\n      case 'select':\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>{label}</InputLabel>\n            <Select\n              value={value}\n              onChange={(e) => handleFilterChange(key, e.target.value)}\n              input={<OutlinedInput label={label} />}\n            >\n              <MenuItem value=\"\">All {label}</MenuItem>\n              {options.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        );\n\n      case 'multiselect':\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>{label}</InputLabel>\n            <Select\n              multiple\n              value={Array.isArray(value) ? value : []}\n              onChange={(e) => handleFilterChange(key, e.target.value)}\n              input={<OutlinedInput label={label} />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((val) => {\n                    const option = options.find(opt => opt.value === val);\n                    return (\n                      <Chip \n                        key={val} \n                        label={option ? option.label : val} \n                        size=\"small\" \n                      />\n                    );\n                  })}\n                </Box>\n              )}\n            >\n              {options.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        );\n\n      case 'date':\n        return (\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <DatePicker\n              label={label}\n              value={value || null}\n              onChange={(newValue) => handleFilterChange(key, newValue)}\n              slotProps={{\n                textField: {\n                  size: 'small',\n                  fullWidth: true\n                }\n              }}\n            />\n          </LocalizationProvider>\n        );\n\n      case 'number':\n        return (\n          <TextField\n            fullWidth\n            size=\"small\"\n            label={label}\n            type=\"number\"\n            value={value}\n            onChange={(e) => handleFilterChange(key, e.target.value)}\n            placeholder={placeholder}\n          />\n        );\n\n      case 'text':\n      default:\n        return (\n          <TextField\n            fullWidth\n            size=\"small\"\n            label={label}\n            value={value}\n            onChange={(e) => handleFilterChange(key, e.target.value)}\n            placeholder={placeholder}\n          />\n        );\n    }\n  };\n\n  const getActiveFiltersCount = () => {\n    return Object.values(filters).filter(value => {\n      if (Array.isArray(value)) return value.length > 0;\n      if (value instanceof Date) return true;\n      return value !== '' && value !== null && value !== undefined;\n    }).length;\n  };\n\n  return (\n    <Collapse in={show}>\n      <Paper \n        sx={{ \n          p: 3, \n          mb: 3, \n          backgroundColor: 'grey.50',\n          border: 1,\n          borderColor: 'divider'\n        }}\n      >\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h6\" component=\"h3\">\n            Filters ({getActiveFiltersCount()} active)\n          </Typography>\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            onClick={onClearFilters}\n            disabled={getActiveFiltersCount() === 0}\n          >\n            Clear All\n          </Button>\n        </Box>\n\n        {/* Quick Filters */}\n        {quickFilters.length > 0 && (\n          <>\n            <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 600 }}>\n              Quick Filters\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n              {quickFilters.map((quickFilter) => (\n                <Chip\n                  key={quickFilter.key}\n                  label={quickFilter.label}\n                  onClick={() => onApplyQuickFilter(quickFilter)}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  sx={{ '&:hover': { backgroundColor: 'primary.light', color: 'white' } }}\n                />\n              ))}\n            </Box>\n            <Divider sx={{ mb: 2 }} />\n          </>\n        )}\n\n        {/* Filter Fields */}\n        <Grid container spacing={2}>\n          {filterConfig.map((config) => (\n            <Grid item xs={12} sm={6} md={4} key={config.key}>\n              {renderFilterField(config)}\n            </Grid>\n          ))}\n        </Grid>\n\n        {/* Active Filters Display */}\n        {getActiveFiltersCount() > 0 && (\n          <>\n            <Divider sx={{ my: 2 }} />\n            <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 600 }}>\n              Active Filters\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n              {Object.entries(filters).map(([key, value]) => {\n                if (Array.isArray(value) && value.length === 0) return null;\n                if (!value || value === '') return null;\n                \n                const config = filterConfig.find(c => c.key === key);\n                if (!config) return null;\n\n                let displayValue = value;\n                if (Array.isArray(value)) {\n                  displayValue = value.map(v => {\n                    const option = config.options?.find(opt => opt.value === v);\n                    return option ? option.label : v;\n                  }).join(', ');\n                } else if (config.options) {\n                  const option = config.options.find(opt => opt.value === value);\n                  displayValue = option ? option.label : value;\n                } else if (value instanceof Date) {\n                  displayValue = value.toLocaleDateString();\n                }\n\n                return (\n                  <Chip\n                    key={key}\n                    label={`${config.label}: ${displayValue}`}\n                    onDelete={() => handleClearFilter(key)}\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                );\n              }).filter(Boolean)}\n            </Box>\n          </>\n        )}\n      </Paper>\n    </Collapse>\n  );\n};\n\nexport default UnifiedFilters;"],"names":["priorityConfig","low","label","color","bgColor","icon","_jsx","Flag","medium","high","Warning","urgent","PriorityHigh","statusConfig","pending","Schedule","PlayArrow","completed","CheckCircle","_ref","tasks","projects","teamMembers","onUpdateTask","onDeleteTask","onAddTask","onViewTask","onEditTask","searchValue","setSearchValue","useState","showFilters","setShowFilters","currentTab","setCurrentTab","sortBy","setSortBy","sortDirection","setSortDirection","filters","setFilters","status","priority","project","assignee","dueDateFrom","dueDateTo","filterConfig","key","type","options","value","map","p","id","name","tm","fullName","quickFilters","Date","filteredAndSortedTasks","useMemo","filtered","filter","task","_task$description","searchLower","toLowerCase","matchesSearch","includes","description","matchesStatus","matchesPriority","matchesProject","projectId","matchesAssignee","assignedTo","sort","a","b","aValue","bValue","dueDate","priorityOrder","tasksByStatus","grouped","forEach","push","activeFilters","Object","entries","_ref2","undefined","_ref3","charAt","toUpperCase","slice","replace","displayValue","find","member","formatDate","dateString","toLocaleDateString","year","month","day","isOverdue","today","setHours","handleClearFilters","handleClearFilter","prev","_objectSpread","handleExport","exportTasksToExcel","handleCompleteTask","taskId","completedAt","toISOString","handleUndoTask","length","_jsxs","Box","children","UnifiedHeader","title","onSearchChange","onToggleFilters","activeFiltersCount","onExport","onAdd","addButtonText","onClearFilter","sx","textAlign","py","Assignment","fontSize","mb","Typography","variant","UnifiedFilters","show","onFilterChange","handleFilterChange","onClearFilters","onApplyQuickFilter","quickFilter","borderBottom","borderColor","Tabs","onChange","e","newValue","Tab","ViewList","ViewModule","Today","List","overdue","assignedMember","React","ListItem","borderLeft","concat","backgroundColor","borderRadius","boxShadow","ListItemAvatar","Avatar","bgcolor","roleColor","initials","Person","ListItemText","primary","display","alignItems","gap","fontWeight","Chip","size","secondary","ListItemSecondaryAction","IconButton","onClick","EditIcon","Undo","handleDeleteTask","taskName","window","confirm","Delete","Grid","container","spacing","_ref4","statusTasks","statusInfo","item","xs","md","Paper","minHeight","Divider","Card","CardContent","pb","justifyContent","width","height","renderTaskCard","sm","CalendarToday","renderFilterField","config","placeholder","FormControl","fullWidth","InputLabel","Select","target","input","OutlinedInput","MenuItem","option","multiple","Array","isArray","renderValue","selected","flexWrap","val","opt","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","slotProps","textField","TextField","getActiveFiltersCount","values","Collapse","in","border","component","Button","disabled","_Fragment","my","c","v","_config$options","join","onDelete","Boolean"],"sourceRoot":""}