{"version":3,"file":"static/js/185.6f271cc5.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/AccountTree.js","features/projects/components/ProjectsTableView.js","../node_modules/@mui/icons-material/esm/CalendarToday.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M22 11V3h-7v3H9V3H2v8h7V8h2v10h4v3h7v-8h-7v3h-2V8h2v3z\"\n}), 'AccountTree');","import React, { useState } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Paper,\n  Chip,\n  IconButton,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n  Box,\n  Typography,\n  LinearProgress,\n  Avatar,\n  Tooltip\n} from '@mui/material';\nimport {\n  MoreVert as MoreVertIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Visibility as ViewIcon,\n  Business as BusinessIcon,\n  Person as PersonIcon,\n  CalendarToday as CalendarIcon,\n  AccountTree as ScopeIcon\n} from '@mui/icons-material';\n\nconst ProjectsTableView = ({ \n  projects = [], \n  clients = [], \n  teamMembers = [], \n  onEditProject,\n  onDeleteProject,\n  onViewProject,\n  onManageScope \n}) => {\n  const [orderBy, setOrderBy] = useState('name');\n  const [order, setOrder] = useState('asc');\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedProject, setSelectedProject] = useState(null);\n\n  // Helper functions\n  const getClientName = (clientId) => {\n    const client = clients.find(c => c.id === clientId);\n    return client ? client.companyName : 'No Client Assigned';\n  };\n\n  const getProjectManager = (managerId) => {\n    const manager = teamMembers.find(tm => tm.id === managerId);\n    return manager ? manager.fullName : 'Unassigned';\n  };\n\n  const getStatusConfig = (status) => {\n    const configs = {\n      'on-tender': { label: 'On Tender', color: '#3498db', bgColor: '#ebf3fd' },\n      'awarded': { label: 'Awarded', color: '#27ae60', bgColor: '#eafaf1' },\n      'on-hold': { label: 'On Hold', color: '#f39c12', bgColor: '#fef9e7' },\n      'not-awarded': { label: 'Not Awarded', color: '#e74c3c', bgColor: '#fdedec' },\n      'active': { label: 'Active', color: '#9b59b6', bgColor: '#f4ecf7' },\n      'completed': { label: 'Completed', color: '#2c3e50', bgColor: '#eaeded' }\n    };\n    return configs[status] || configs['on-tender'];\n  };\n\n  const getTypeConfig = (type) => {\n    const configs = {\n      'general-contractor': { label: 'General Contractor', color: '#e67e22' },\n      'fit-out': { label: 'Fit-out', color: '#e67e22' },\n      'mep': { label: 'MEP', color: '#1abc9c' },\n      'electrical': { label: 'Electrical', color: '#f1c40f' },\n      'millwork': { label: 'Millwork', color: '#8e44ad' },\n      'management': { label: 'Management', color: '#37444B' }\n    };\n    return configs[type] || configs['general-contractor'];\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Not set';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { \n      year: 'numeric', \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  const calculateProgress = (project) => {\n    // This would be calculated based on tasks in a real implementation\n    return Math.floor(Math.random() * 100); // Placeholder\n  };\n\n  // Sorting functionality\n  const handleRequestSort = (property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const sortedProjects = React.useMemo(() => {\n    return [...projects].sort((a, b) => {\n      let aValue = a[orderBy];\n      let bValue = b[orderBy];\n      \n      // Handle special cases\n      if (orderBy === 'client') {\n        aValue = getClientName(a.clientId);\n        bValue = getClientName(b.clientId);\n      }\n      \n      if (orderBy === 'manager') {\n        aValue = getProjectManager(a.projectManager);\n        bValue = getProjectManager(b.projectManager);\n      }\n      \n      if (aValue < bValue) {\n        return order === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return order === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  }, [projects, orderBy, order, clients, teamMembers]);\n\n  // Menu handlers\n  const handleMenuOpen = (event, project) => {\n    setAnchorEl(event.currentTarget);\n    setSelectedProject(project);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    setSelectedProject(null);\n  };\n\n  const handleMenuAction = (action) => {\n    if (selectedProject) {\n      switch (action) {\n        case 'view':\n          onViewProject && onViewProject(selectedProject);\n          break;\n        case 'edit':\n          onEditProject && onEditProject(selectedProject);\n          break;\n        case 'scope':\n          onManageScope && onManageScope(selectedProject);\n          break;\n        case 'delete':\n          if (window.confirm(`Are you sure you want to delete \"${selectedProject.name}\"?`)) {\n            onDeleteProject && onDeleteProject(selectedProject.id);\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    handleMenuClose();\n  };\n\n  const columns = [\n    { id: 'name', label: 'Project Name', sortable: true, minWidth: 200 },\n    { id: 'client', label: 'Client', sortable: true, minWidth: 150 },\n    { id: 'type', label: 'Type', sortable: true, minWidth: 130 },\n    { id: 'status', label: 'Status', sortable: true, minWidth: 120 },\n    { id: 'manager', label: 'Manager', sortable: true, minWidth: 150 },\n    { id: 'startDate', label: 'Start Date', sortable: true, minWidth: 120 },\n    { id: 'endDate', label: 'End Date', sortable: true, minWidth: 120 },\n    { id: 'progress', label: 'Progress', sortable: false, minWidth: 120 },\n    { id: 'actions', label: 'Actions', sortable: false, minWidth: 80 }\n  ];\n\n  if (projects.length === 0) {\n    return (\n      <Box sx={{ \n        textAlign: 'center', \n        py: 8,\n        backgroundColor: 'white',\n        borderRadius: 2,\n        border: '1px solid #E9ECEF'\n      }}>\n        <BusinessIcon sx={{ fontSize: 64, color: '#BDC3C7', mb: 2 }} />\n        <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n          No Projects Found\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          Start by creating your first project or adjust your search filters.\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Paper \n      elevation={0}\n      sx={{ \n        width: '100%', \n        overflow: 'hidden',\n        border: '1px solid #E9ECEF',\n        borderRadius: 2\n      }}\n    >\n      <TableContainer sx={{ maxHeight: 600 }}>\n        <Table stickyHeader>\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  sx={{ \n                    minWidth: column.minWidth,\n                    backgroundColor: '#F8F9FA',\n                    fontWeight: 600,\n                    color: '#2C3E50'\n                  }}\n                >\n                  {column.sortable ? (\n                    <TableSortLabel\n                      active={orderBy === column.id}\n                      direction={orderBy === column.id ? order : 'asc'}\n                      onClick={() => handleRequestSort(column.id)}\n                    >\n                      {column.label}\n                    </TableSortLabel>\n                  ) : (\n                    column.label\n                  )}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {sortedProjects.map((project) => {\n              const statusConfig = getStatusConfig(project.status);\n              const typeConfig = getTypeConfig(project.type);\n              const progress = calculateProgress(project);\n\n              return (\n                <TableRow \n                  key={project.id}\n                  hover\n                  sx={{ \n                    '&:hover': { \n                      backgroundColor: '#F8F9FA' \n                    }\n                  }}\n                >\n                  {/* Project Name */}\n                  <TableCell>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <Avatar\n                        sx={{\n                          width: 32,\n                          height: 32,\n                          backgroundColor: typeConfig.color,\n                          fontSize: '0.8rem',\n                          fontWeight: 600\n                        }}\n                      >\n                        {project.name.substring(0, 2).toUpperCase()}\n                      </Avatar>\n                      <Box>\n                        <Typography \n                          variant=\"body2\" \n                          sx={{ \n                            fontWeight: 600, \n                            color: '#3498db',\n                            cursor: 'pointer',\n                            textDecoration: 'none',\n                            '&:hover': {\n                              textDecoration: 'underline',\n                              color: '#2980b9'\n                            }\n                          }}\n                          onClick={() => onManageScope && onManageScope(project)}\n                        >\n                          {project.name}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </TableCell>\n\n                  {/* Client */}\n                  <TableCell>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <BusinessIcon fontSize=\"small\" color=\"action\" />\n                      <Typography variant=\"body2\">\n                        {getClientName(project.clientId)}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n\n                  {/* Type */}\n                  <TableCell>\n                    <Chip\n                      label={typeConfig.label}\n                      size=\"small\"\n                      sx={{\n                        backgroundColor: `${typeConfig.color}15`,\n                        color: typeConfig.color,\n                        fontWeight: 500,\n                        border: `1px solid ${typeConfig.color}30`\n                      }}\n                    />\n                  </TableCell>\n\n                  {/* Status */}\n                  <TableCell>\n                    <Chip\n                      label={statusConfig.label}\n                      size=\"small\"\n                      sx={{\n                        backgroundColor: statusConfig.bgColor,\n                        color: statusConfig.color,\n                        fontWeight: 500\n                      }}\n                    />\n                  </TableCell>\n\n                  {/* Manager */}\n                  <TableCell>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <PersonIcon fontSize=\"small\" color=\"action\" />\n                      <Typography variant=\"body2\">\n                        {getProjectManager(project.projectManager)}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n\n                  {/* Start Date */}\n                  <TableCell>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <CalendarIcon fontSize=\"small\" color=\"action\" />\n                      <Typography variant=\"body2\">\n                        {formatDate(project.startDate)}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n\n                  {/* End Date */}\n                  <TableCell>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <CalendarIcon fontSize=\"small\" color=\"action\" />\n                      <Typography variant=\"body2\">\n                        {formatDate(project.endDate)}\n                      </Typography>\n                    </Box>\n                  </TableCell>\n\n                  {/* Progress */}\n                  <TableCell>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <Box sx={{ width: '100%' }}>\n                        <LinearProgress\n                          variant=\"determinate\"\n                          value={progress}\n                          sx={{ \n                            height: 6, \n                            borderRadius: 3,\n                            backgroundColor: '#E0E0E0',\n                            '& .MuiLinearProgress-bar': {\n                              backgroundColor: progress > 75 ? '#27AE60' : \n                                             progress > 50 ? '#F39C12' : \n                                             progress > 25 ? '#3498DB' : '#E74C3C'\n                            }\n                          }}\n                        />\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          {progress}%\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </TableCell>\n\n                  {/* Actions */}\n                  <TableCell>\n                    <IconButton\n                      size=\"small\"\n                      onClick={(e) => handleMenuOpen(e, project)}\n                    >\n                      <MoreVertIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Context Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <MenuItem onClick={() => handleMenuAction('view')}>\n          <ListItemIcon>\n            <ViewIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>View Details</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleMenuAction('edit')}>\n          <ListItemIcon>\n            <EditIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Edit Project</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={() => handleMenuAction('scope')}>\n          <ListItemIcon>\n            <ScopeIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Manage Scope</ListItemText>\n        </MenuItem>\n        <MenuItem \n          onClick={() => handleMenuAction('delete')}\n          sx={{ color: 'error.main' }}\n        >\n          <ListItemIcon>\n            <DeleteIcon fontSize=\"small\" color=\"error\" />\n          </ListItemIcon>\n          <ListItemText>Delete Project</ListItemText>\n        </MenuItem>\n      </Menu>\n    </Paper>\n  );\n};\n\nexport default ProjectsTableView;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m0 18H4V8h16z\"\n}), 'CalendarToday');"],"names":["createSvgIcon","_jsx","d","_ref","projects","clients","teamMembers","onEditProject","onDeleteProject","onViewProject","onManageScope","orderBy","setOrderBy","useState","order","setOrder","anchorEl","setAnchorEl","selectedProject","setSelectedProject","getClientName","clientId","client","find","c","id","companyName","getProjectManager","managerId","manager","tm","fullName","formatDate","dateString","Date","toLocaleDateString","year","month","day","sortedProjects","React","sort","a","b","aValue","bValue","projectManager","handleMenuClose","handleMenuAction","action","window","confirm","concat","name","length","_jsxs","Box","sx","textAlign","py","backgroundColor","borderRadius","border","children","BusinessIcon","fontSize","color","mb","Typography","variant","gutterBottom","Paper","elevation","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","label","sortable","minWidth","map","column","TableCell","fontWeight","TableSortLabel","active","direction","onClick","handleRequestSort","property","TableBody","project","statusConfig","status","configs","bgColor","getStatusConfig","typeConfig","type","getTypeConfig","progress","Math","floor","random","hover","display","alignItems","gap","Avatar","height","substring","toUpperCase","cursor","textDecoration","Chip","size","PersonIcon","CalendarIcon","startDate","endDate","LinearProgress","value","IconButton","e","handleMenuOpen","event","currentTarget","MoreVertIcon","Menu","open","Boolean","onClose","transformOrigin","horizontal","vertical","anchorOrigin","MenuItem","ListItemIcon","ViewIcon","ListItemText","EditIcon","ScopeIcon","DeleteIcon"],"sourceRoot":""}