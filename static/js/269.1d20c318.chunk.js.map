{"version":3,"file":"static/js/269.1d20c318.chunk.js","mappings":"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","sources":["components/common/FileUpload.js","features/tasks/components/TaskForm.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  IconButton,\r\n  Chip,\r\n  LinearProgress,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Alert\r\n} from '@mui/material';\r\nimport {\r\n  CloudUpload,\r\n  AttachFile,\r\n  Delete,\r\n  Download,\r\n  Image,\r\n  PictureAsPdf,\r\n  Description,\r\n  InsertDriveFile,\r\n  Visibility\r\n} from '@mui/icons-material';\r\n\r\n// File type icons and colors\r\nconst fileTypeConfig = {\r\n  image: { icon: <Image />, color: '#4caf50', types: ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'] },\r\n  pdf: { icon: <PictureAsPdf />, color: '#f44336', types: ['pdf'] },\r\n  document: { icon: <Description />, color: '#2196f3', types: ['doc', 'docx', 'txt', 'rtf'] },\r\n  default: { icon: <InsertDriveFile />, color: '#9e9e9e', types: [] }\r\n};\r\n\r\nfunction FileUpload({ taskId, projectId, files = [], onFilesChange, maxFiles = 10, maxSize = 10 }) {\r\n  const [dragOver, setDragOver] = useState(false);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [previewFile, setPreviewFile] = useState(null);\r\n  const [error, setError] = useState('');\r\n  const fileInputRef = useRef(null);\r\n\r\n  const getFileType = (fileName) => {\r\n    const extension = fileName.split('.').pop().toLowerCase();\r\n    for (const [type, config] of Object.entries(fileTypeConfig)) {\r\n      if (config.types.includes(extension)) {\r\n        return { ...config, extension };\r\n      }\r\n    }\r\n    return { ...fileTypeConfig.default, extension };\r\n  };\r\n\r\n  const formatFileSize = (bytes) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  };\r\n\r\n  const validateFile = (file) => {\r\n    // Size check (MB to bytes)\r\n    if (file.size > maxSize * 1024 * 1024) {\r\n      return `File size must be less than ${maxSize}MB`;\r\n    }\r\n\r\n    // File count check\r\n    if (files.length >= maxFiles) {\r\n      return `Maximum ${maxFiles} files allowed`;\r\n    }\r\n\r\n    // Duplicate check\r\n    if (files.some(f => f.name === file.name)) {\r\n      return 'File with this name already exists';\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const handleFileSelect = (selectedFiles) => {\r\n    const fileList = Array.from(selectedFiles);\r\n    const validFiles = [];\r\n    let errorMsg = '';\r\n\r\n    for (const file of fileList) {\r\n      const validation = validateFile(file);\r\n      if (validation) {\r\n        errorMsg = validation;\r\n        break;\r\n      }\r\n      validFiles.push(file);\r\n    }\r\n\r\n    if (errorMsg) {\r\n      setError(errorMsg);\r\n      setTimeout(() => setError(''), 5000);\r\n      return;\r\n    }\r\n\r\n    // Simulate upload process\r\n    setUploading(true);\r\n    \r\n    setTimeout(() => {\r\n      const newFiles = validFiles.map(file => ({\r\n        id: Date.now() + Math.random(),\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type,\r\n        uploadDate: new Date().toISOString(),\r\n        taskId,\r\n        projectId,\r\n        url: URL.createObjectURL(file), // In real app, this would be server URL\r\n        file: file // Store file object for preview\r\n      }));\r\n\r\n      onFilesChange([...files, ...newFiles]);\r\n      setUploading(false);\r\n      setError('');\r\n    }, 1500);\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    setDragOver(false);\r\n    \r\n    const droppedFiles = e.dataTransfer.files;\r\n    if (droppedFiles.length > 0) {\r\n      handleFileSelect(droppedFiles);\r\n    }\r\n  };\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n    setDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e) => {\r\n    e.preventDefault();\r\n    setDragOver(false);\r\n  };\r\n\r\n  const handleFileInputChange = (e) => {\r\n    if (e.target.files.length > 0) {\r\n      handleFileSelect(e.target.files);\r\n    }\r\n  };\r\n\r\n  const handleDeleteFile = (fileId) => {\r\n    const updatedFiles = files.filter(file => file.id !== fileId);\r\n    onFilesChange(updatedFiles);\r\n  };\r\n\r\n  const handlePreviewFile = (file) => {\r\n    const fileType = getFileType(file.name);\r\n    if (fileType.extension === 'pdf' || fileType.types.includes('image')) {\r\n      setPreviewFile(file);\r\n    } else {\r\n      // For other file types, trigger download\r\n      handleDownloadFile(file);\r\n    }\r\n  };\r\n\r\n  const handleDownloadFile = (file) => {\r\n    const link = document.createElement('a');\r\n    link.href = file.url;\r\n    link.download = file.name;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Upload Area */}\r\n      <Paper\r\n        sx={{\r\n          p: 3,\r\n          mb: 3,\r\n          border: `2px dashed ${dragOver ? '#37444B' : '#C0B19E'}`,\r\n          backgroundColor: dragOver ? '#F1EEEA' : 'transparent',\r\n          cursor: 'pointer',\r\n          transition: 'all 0.3s ease',\r\n          textAlign: 'center'\r\n        }}\r\n        onDrop={handleDrop}\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onClick={() => fileInputRef.current?.click()}\r\n      >\r\n        <CloudUpload sx={{ fontSize: 48, color: '#C0B19E', mb: 2 }} />\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Drop files here or click to browse\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n          Supports: Images, PDFs, Documents\r\n        </Typography>\r\n        <Typography variant=\"caption\" color=\"text.secondary\">\r\n          Max {maxFiles} files, {maxSize}MB each\r\n        </Typography>\r\n        \r\n        <input\r\n          ref={fileInputRef}\r\n          type=\"file\"\r\n          multiple\r\n          style={{ display: 'none' }}\r\n          onChange={handleFileInputChange}\r\n          accept=\"image/*,.pdf,.doc,.docx,.txt\"\r\n        />\r\n      </Paper>\r\n\r\n      {/* Upload Progress */}\r\n      {uploading && (\r\n        <Box sx={{ mb: 3 }}>\r\n          <Typography variant=\"body2\" gutterBottom>\r\n            Uploading files...\r\n          </Typography>\r\n          <LinearProgress />\r\n        </Box>\r\n      )}\r\n\r\n      {/* Files List */}\r\n      {files.length > 0 && (\r\n        <Paper sx={{ p: 2 }}>\r\n          <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <AttachFile />\r\n            Attached Files ({files.length})\r\n          </Typography>\r\n          \r\n          <List>\r\n            {files.map((file) => {\r\n              const fileType = getFileType(file.name);\r\n              \r\n              return (\r\n                <ListItem\r\n                  key={file.id}\r\n                  sx={{\r\n                    border: 1,\r\n                    borderColor: 'divider',\r\n                    borderRadius: 2,\r\n                    mb: 1,\r\n                    backgroundColor: 'background.paper'\r\n                  }}\r\n                >\r\n                  <ListItemIcon>\r\n                    <Box sx={{ color: fileType.color }}>\r\n                      {fileType.icon}\r\n                    </Box>\r\n                  </ListItemIcon>\r\n                  \r\n                  <ListItemText\r\n                    primary={file.name}\r\n                    secondary={\r\n                      <Box>\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          {formatFileSize(file.size)} • {fileType.extension.toUpperCase()}\r\n                        </Typography>\r\n                        <br />\r\n                        <Typography variant=\"caption\" color=\"text.secondary\">\r\n                          Uploaded: {new Date(file.uploadDate).toLocaleDateString()}\r\n                        </Typography>\r\n                      </Box>\r\n                    }\r\n                  />\r\n                  \r\n                  <ListItemSecondaryAction>\r\n                    <Box sx={{ display: 'flex', gap: 1 }}>\r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handlePreviewFile(file)}\r\n                        title=\"Preview/Download\"\r\n                      >\r\n                        <Visibility />\r\n                      </IconButton>\r\n                      \r\n                      <IconButton\r\n                        size=\"small\"\r\n                        onClick={() => handleDownloadFile(file)}\r\n                        title=\"Download\"\r\n                      >\r\n                        <Download />\r\n                      </IconButton>\r\n                      \r\n                      <IconButton\r\n                        size=\"small\"\r\n                        color=\"error\"\r\n                        onClick={() => handleDeleteFile(file.id)}\r\n                        title=\"Delete\"\r\n                      >\r\n                        <Delete />\r\n                      </IconButton>\r\n                    </Box>\r\n                  </ListItemSecondaryAction>\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n        </Paper>\r\n      )}\r\n\r\n      {/* File Preview Dialog */}\r\n      <Dialog\r\n        open={!!previewFile}\r\n        onClose={() => setPreviewFile(null)}\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          File Preview: {previewFile?.name}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          {previewFile && (\r\n            <Box sx={{ textAlign: 'center', p: 2 }}>\r\n              {getFileType(previewFile.name).types.includes('image') ? (\r\n                <img\r\n                  src={previewFile.url}\r\n                  alt={previewFile.name}\r\n                  style={{\r\n                    maxWidth: '100%',\r\n                    maxHeight: '500px',\r\n                    objectFit: 'contain'\r\n                  }}\r\n                />\r\n              ) : getFileType(previewFile.name).extension === 'pdf' ? (\r\n                <iframe\r\n                  src={previewFile.url}\r\n                  width=\"100%\"\r\n                  height=\"500px\"\r\n                  title={previewFile.name}\r\n                />\r\n              ) : (\r\n                <Typography>\r\n                  Preview not available for this file type\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setPreviewFile(null)}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => handleDownloadFile(previewFile)}\r\n            startIcon={<Download />}\r\n          >\r\n            Download\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default FileUpload;","import React, { useState } from 'react';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  MenuItem,\r\n  Box,\r\n  Alert,\r\n  Avatar\r\n} from '@mui/material';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport FileUpload from '../../../components/common/FileUpload';\r\n\r\nconst priorityLevels = [\r\n  { value: 'low', label: 'Low', color: '#27ae60' },\r\n  { value: 'medium', label: 'Medium', color: '#f39c12' },\r\n  { value: 'high', label: 'High', color: '#e67e22' },\r\n  { value: 'urgent', label: 'Urgent', color: '#e74c3c' }\r\n];\r\n\r\nfunction TaskForm({ projects, teamMembers = [], onSubmit, initialTask = null }) {\r\n  const [formData, setFormData] = useState(\r\n    initialTask ? {\r\n      projectId: initialTask.projectId || '',\r\n      name: initialTask.name || '',\r\n      assignedTo: initialTask.assignedTo || '',\r\n      priority: initialTask.priority || 'medium',\r\n      dueDate: initialTask.dueDate ? new Date(initialTask.dueDate) : null,\r\n      description: initialTask.description || ''\r\n    } : {\r\n      projectId: '',\r\n      name: '',\r\n      assignedTo: '',\r\n      priority: 'medium',\r\n      dueDate: null,\r\n      description: ''\r\n    }\r\n  );\r\n  const [taskFiles, setTaskFiles] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const handleChange = (field) => (event) => {\r\n    setFormData({\r\n      ...formData,\r\n      [field]: event.target.value\r\n    });\r\n    if (errors[field]) {\r\n      setErrors({\r\n        ...errors,\r\n        [field]: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setFormData({\r\n      ...formData,\r\n      dueDate: date\r\n    });\r\n    if (errors.dueDate) {\r\n      setErrors({\r\n        ...errors,\r\n        dueDate: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n\r\n    if (!formData.projectId) {\r\n      newErrors.projectId = 'Please select a project';\r\n    }\r\n\r\n    if (!formData.name || !formData.name.trim()) {\r\n      newErrors.name = 'Task name is required';\r\n    }\r\n\r\n    if (!formData.assignedTo) {\r\n      newErrors.assignedTo = 'Please select a team member';\r\n    }\r\n\r\n    if (!formData.dueDate) {\r\n      newErrors.dueDate = 'Due date is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    \r\n    if (validateForm()) {\r\n      const submitData = {\r\n        ...formData,\r\n        projectId: parseInt(formData.projectId),\r\n        assignedTo: parseInt(formData.assignedTo),\r\n        dueDate: formData.dueDate.toISOString().split('T')[0],\r\n        files: taskFiles\r\n      };\r\n      \r\n      if (initialTask) {\r\n        submitData.id = initialTask.id;\r\n      }\r\n      \r\n      onSubmit(submitData);\r\n      \r\n      // Only clear form if creating new task\r\n      if (!initialTask) {\r\n        setFormData({\r\n          projectId: '',\r\n          name: '',\r\n          assignedTo: '',\r\n          priority: 'medium',\r\n          dueDate: null,\r\n          description: ''\r\n        });\r\n        setTaskFiles([]);\r\n      }\r\n      \r\n      setSuccess(true);\r\n      setTimeout(() => setSuccess(false), 3000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <Box component=\"form\" onSubmit={handleSubmit} sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n        {success && (\r\n          <Alert severity=\"success\">\r\n            Task added successfully!\r\n          </Alert>\r\n        )}\r\n        \r\n        <TextField\r\n          select\r\n          label=\"Select Project\"\r\n          value={formData.projectId}\r\n          onChange={handleChange('projectId')}\r\n          error={!!errors.projectId}\r\n          helperText={errors.projectId || (projects.length === 0 ? 'Create a project first' : '')}\r\n          fullWidth\r\n          required\r\n          disabled={projects.length === 0}\r\n        >\r\n          {projects.map((project) => (\r\n            <MenuItem key={project.id} value={project.id}>\r\n              {project.name} ({project.type})\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n\r\n        <TextField\r\n          label=\"Task Name\"\r\n          value={formData.name}\r\n          onChange={handleChange('name')}\r\n          error={!!errors.name}\r\n          helperText={errors.name}\r\n          fullWidth\r\n          required\r\n        />\r\n\r\n        <TextField\r\n          select\r\n          label=\"Assigned To\"\r\n          value={formData.assignedTo || ''}\r\n          onChange={handleChange('assignedTo')}\r\n          error={!!errors.assignedTo}\r\n          helperText={errors.assignedTo || (teamMembers.length === 0 ? 'Add team members first' : '')}\r\n          fullWidth\r\n          required\r\n          disabled={teamMembers.length === 0}\r\n        >\r\n          {teamMembers.filter(member => member.status === 'active').map((member) => (\r\n            <MenuItem key={member.id} value={member.id}>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                <Avatar sx={{ width: 24, height: 24, fontSize: 12, bgcolor: member.roleColor }}>\r\n                  {member.initials}\r\n                </Avatar>\r\n                {member.fullName} - {member.role}\r\n              </Box>\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n\r\n        <TextField\r\n          select\r\n          label=\"Priority\"\r\n          value={formData.priority}\r\n          onChange={handleChange('priority')}\r\n          fullWidth\r\n          required\r\n        >\r\n          {priorityLevels.map((priority) => (\r\n            <MenuItem \r\n              key={priority.value} \r\n              value={priority.value}\r\n              sx={{ \r\n                borderLeft: `4px solid ${priority.color}`,\r\n                marginBottom: 0.5\r\n              }}\r\n            >\r\n              {priority.label}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n\r\n        <DatePicker\r\n          label=\"Due Date\"\r\n          value={formData.dueDate}\r\n          onChange={handleDateChange}\r\n          minDate={new Date()}\r\n          slotProps={{\r\n            textField: {\r\n              error: !!errors.dueDate,\r\n              helperText: errors.dueDate,\r\n              fullWidth: true,\r\n              required: true\r\n            }\r\n          }}\r\n        />\r\n\r\n        <TextField\r\n          label=\"Task Description\"\r\n          value={formData.description}\r\n          onChange={handleChange('description')}\r\n          multiline\r\n          rows={2}\r\n          fullWidth\r\n          placeholder=\"Optional task details...\"\r\n        />\r\n\r\n        <FileUpload\r\n          taskId={Date.now()}\r\n          projectId={formData.projectId}\r\n          files={taskFiles}\r\n          onFilesChange={setTaskFiles}\r\n          maxFiles={5}\r\n          maxSize={10}\r\n        />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          size=\"large\"\r\n          sx={{ mt: 2 }}\r\n          disabled={projects.length === 0}\r\n        >\r\n          {initialTask ? 'Save Changes' : 'Add Task'}\r\n        </Button>\r\n      </Box>\r\n    </LocalizationProvider>\r\n  );\r\n}\r\n\r\nexport default TaskForm;"],"names":["fileTypeConfig","image","icon","_jsx","Image","color","types","pdf","PictureAsPdf","document","Description","default","InsertDriveFile","_ref","taskId","projectId","files","onFilesChange","maxFiles","maxSize","dragOver","setDragOver","useState","uploading","setUploading","previewFile","setPreviewFile","error","setError","fileInputRef","useRef","getFileType","fileName","extension","split","pop","toLowerCase","type","config","Object","entries","includes","_objectSpread","formatFileSize","bytes","i","Math","floor","log","parseFloat","pow","toFixed","validateFile","file","size","concat","length","some","f","name","handleFileSelect","selectedFiles","fileList","Array","from","validFiles","errorMsg","validation","push","setTimeout","newFiles","map","id","Date","now","random","uploadDate","toISOString","url","URL","createObjectURL","handleDownloadFile","link","createElement","href","download","body","appendChild","click","removeChild","_jsxs","Box","children","Alert","severity","sx","mb","Paper","p","border","backgroundColor","cursor","transition","textAlign","onDrop","e","preventDefault","droppedFiles","dataTransfer","onDragOver","onDragLeave","onClick","_fileInputRef$current","current","CloudUpload","fontSize","Typography","variant","gutterBottom","ref","multiple","style","display","onChange","target","accept","LinearProgress","alignItems","gap","AttachFile","List","fileType","ListItem","borderColor","borderRadius","ListItemIcon","ListItemText","primary","secondary","toUpperCase","toLocaleDateString","ListItemSecondaryAction","IconButton","handlePreviewFile","title","Visibility","Download","fileId","updatedFiles","filter","handleDeleteFile","Delete","Dialog","open","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","src","alt","maxHeight","objectFit","width","height","DialogActions","Button","startIcon","priorityLevels","value","label","projects","teamMembers","onSubmit","initialTask","formData","setFormData","assignedTo","priority","dueDate","description","taskFiles","setTaskFiles","errors","setErrors","success","setSuccess","handleChange","field","event","LocalizationProvider","dateAdapter","AdapterDateFns","component","validateForm","newErrors","trim","keys","submitData","parseInt","flexDirection","TextField","select","helperText","required","disabled","project","MenuItem","member","status","Avatar","bgcolor","roleColor","initials","fullName","role","borderLeft","marginBottom","DatePicker","date","minDate","slotProps","textField","multiline","rows","placeholder","FileUpload","mt"],"sourceRoot":""}