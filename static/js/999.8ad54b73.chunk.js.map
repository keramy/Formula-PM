{"version":3,"file":"static/js/999.8ad54b73.chunk.js","mappings":"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","sources":["components/views/BoardView.js","components/ui/UnifiedTableView.js","../node_modules/@mui/icons-material/esm/Schedule.js","components/ui/UnifiedFilters.js","../node_modules/@mui/icons-material/esm/PlayArrow.js","features/tasks/components/EnhancedTasksList.js","../node_modules/@mui/icons-material/esm/CheckCircle.js","../node_modules/@mui/icons-material/esm/DateRange.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { \n  Box, \n  Paper, \n  Typography, \n  Chip, \n  Avatar, \n  Card, \n  CardContent,\n  Tooltip\n} from '@mui/material';\nimport {\n  Flag,\n  PriorityHigh,\n  Warning,\n  CalendarToday,\n  Person as PersonIcon\n} from '@mui/icons-material';\n\nconst BoardView = ({ tasks = [], onTaskUpdate, teamMembers = [], projects = [] }) => {\n\n  // Group tasks by status\n  const columns = useMemo(() => {\n    const columnConfig = [\n      {\n        id: 'pending',\n        title: 'TO DO',\n        color: '#f39c12',\n        bgColor: '#fef9e7'\n      },\n      {\n        id: 'in-progress',\n        title: 'IN PROGRESS', \n        color: '#3498db',\n        bgColor: '#ebf5fb'\n      },\n      {\n        id: 'completed',\n        title: 'DONE',\n        color: '#27ae60',\n        bgColor: '#eafaf1'\n      }\n    ];\n\n    const grouped = {};\n    \n    // Initialize columns\n    columnConfig.forEach(col => {\n      grouped[col.id] = {\n        ...col,\n        tasks: []\n      };\n    });\n\n    // Group tasks by status\n    tasks.forEach(task => {\n      let status = task.status || 'pending';\n      \n      // Handle different status formats\n      if (status === 'in_progress') {\n        status = 'in-progress';\n      }\n      \n      if (grouped[status]) {\n        grouped[status].tasks.push(task);\n      } else {\n        // Fallback to pending if status doesn't match\n        grouped['pending'].tasks.push(task);\n      }\n    });\n\n    return grouped;\n  }, [tasks]);\n\n  const priorityConfig = {\n    low: { label: 'Low', color: '#27ae60', bgColor: '#eafaf1', icon: <Flag fontSize=\"small\" /> },\n    medium: { label: 'Medium', color: '#f39c12', bgColor: '#fef9e7', icon: <Flag fontSize=\"small\" /> },\n    high: { label: 'High', color: '#e67e22', bgColor: '#fef5e7', icon: <Warning fontSize=\"small\" /> },\n    urgent: { label: 'Urgent', color: '#e74c3c', bgColor: '#fdf2f2', icon: <PriorityHigh fontSize=\"small\" /> }\n  };\n\n  const getAssignedMember = (assignedTo) => {\n    return teamMembers.find(member => member.id === assignedTo);\n  };\n\n  const getProjectName = (projectId) => {\n    const project = projects.find(p => p.id === projectId);\n    return project ? project.name : 'Unknown Project';\n  };\n\n  const formatDueDate = (dueDate) => {\n    if (!dueDate) return null;\n    const date = new Date(dueDate);\n    const today = new Date();\n    const diffTime = date - today;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n    if (diffDays < 0) return { text: `Overdue ${Math.abs(diffDays)}d`, color: '#e74c3c', urgent: true };\n    if (diffDays === 0) return { text: 'Due today', color: '#f39c12', urgent: true };\n    if (diffDays === 1) return { text: 'Due tomorrow', color: '#e67e22', urgent: false };\n    if (diffDays <= 7) return { text: `${diffDays} days left`, color: '#3498db', urgent: false };\n    return { text: date.toLocaleDateString(), color: '#7f8c8d', urgent: false };\n  };\n\n  const onDragEnd = (result) => {\n    if (!result.destination) return;\n\n    const { source, destination, draggableId } = result;\n    \n    // Don't do anything if dropped in the same position\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    // Find the task being moved\n    const task = tasks.find(t => t.id === draggableId);\n    if (!task) return;\n\n    // Determine new status based on destination column\n    let newStatus = destination.droppableId;\n    \n    // Handle status mapping\n    if (newStatus === 'in-progress') {\n      newStatus = 'in-progress';\n    }\n\n    // Update the task status - pass just the updates object\n    const updates = {\n      status: newStatus,\n      // Set progress to 100% if completed\n      progress: newStatus === 'completed' ? 100 : task.progress\n    };\n\n    onTaskUpdate(task.id, updates);\n  };\n\n  const TaskCard = ({ task, index }) => {\n    const assignedMember = getAssignedMember(task.assignedTo);\n    const priority = priorityConfig[task.priority] || priorityConfig.medium;\n    const dueInfo = formatDueDate(task.dueDate);\n\n    return (\n      <Draggable draggableId={task.id} index={index}>\n        {(provided, snapshot) => (\n          <Card\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            sx={{\n              mb: 1.5,\n              cursor: 'pointer',\n              backgroundColor: 'white',\n              border: '1px solid #E9ECEF',\n              borderRadius: 2,\n              transition: 'all 0.2s ease-in-out',\n              transform: snapshot.isDragging ? 'rotate(5deg)' : 'none',\n              boxShadow: snapshot.isDragging \n                ? '0 8px 24px rgba(0,0,0,0.15)' \n                : '0 1px 3px rgba(0,0,0,0.1)',\n              '&:hover': {\n                boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\n                transform: 'translateY(-1px)'\n              }\n            }}\n          >\n            <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>\n              {/* Task Name */}\n              <Typography \n                variant=\"body2\" \n                sx={{ \n                  fontWeight: 500, \n                  mb: 1,\n                  color: '#2C3E50',\n                  lineHeight: 1.4\n                }}\n              >\n                {task.name}\n              </Typography>\n\n              {/* Priority Badge */}\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>\n                <Chip\n                  icon={priority.icon}\n                  label={priority.label}\n                  size=\"small\"\n                  sx={{\n                    backgroundColor: priority.bgColor,\n                    color: priority.color,\n                    fontWeight: 500,\n                    height: 20,\n                    fontSize: '0.7rem',\n                    '& .MuiChip-icon': {\n                      color: priority.color,\n                      fontSize: '12px'\n                    }\n                  }}\n                />\n              </Box>\n\n              {/* Project Name */}\n              <Typography \n                variant=\"caption\" \n                sx={{ \n                  color: '#7f8c8d',\n                  display: 'block',\n                  mb: 1\n                }}\n              >\n                {getProjectName(task.projectId)}\n              </Typography>\n\n              {/* Due Date */}\n              {dueInfo && (\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>\n                  <CalendarToday sx={{ fontSize: 12, color: dueInfo.color, mr: 0.5 }} />\n                  <Typography \n                    variant=\"caption\" \n                    sx={{ \n                      color: dueInfo.color,\n                      fontWeight: dueInfo.urgent ? 600 : 400\n                    }}\n                  >\n                    {dueInfo.text}\n                  </Typography>\n                </Box>\n              )}\n\n              {/* Bottom Row - Assignee and Progress */}\n              <Box sx={{ \n                display: 'flex', \n                justifyContent: 'space-between', \n                alignItems: 'center',\n                mt: 1\n              }}>\n                {/* Assigned Member */}\n                <Box>\n                  {assignedMember ? (\n                    <Tooltip title={assignedMember.fullName}>\n                      <Avatar\n                        sx={{\n                          width: 24,\n                          height: 24,\n                          fontSize: '0.7rem',\n                          backgroundColor: assignedMember.roleColor || '#3498db'\n                        }}\n                      >\n                        {assignedMember.initials}\n                      </Avatar>\n                    </Tooltip>\n                  ) : (\n                    <Avatar\n                      sx={{\n                        width: 24,\n                        height: 24,\n                        backgroundColor: '#bdc3c7'\n                      }}\n                    >\n                      <PersonIcon sx={{ fontSize: 14 }} />\n                    </Avatar>\n                  )}\n                </Box>\n\n                {/* Progress */}\n                {task.progress !== undefined && task.progress > 0 && (\n                  <Chip\n                    label={`${task.progress}%`}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    sx={{\n                      height: 20,\n                      fontSize: '0.7rem',\n                      borderColor: task.progress === 100 ? '#27ae60' : '#3498db',\n                      color: task.progress === 100 ? '#27ae60' : '#3498db'\n                    }}\n                  />\n                )}\n              </Box>\n            </CardContent>\n          </Card>\n        )}\n      </Draggable>\n    );\n  };\n\n  return (\n    <Box sx={{ p: 3, height: 'calc(100vh - 200px)', overflow: 'hidden' }}>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Box \n          className=\"board-container\"\n          sx={{ \n            display: 'flex', \n            gap: 3, \n            overflowX: 'auto', \n            height: '100%',\n            pb: 2\n          }}\n        >\n          {Object.entries(columns).map(([columnId, column]) => (\n            <Paper\n              key={columnId}\n              elevation={0}\n              sx={{\n                minWidth: 320,\n                maxWidth: 320,\n                backgroundColor: column.bgColor,\n                border: `1px solid ${column.color}30`,\n                borderRadius: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                height: 'fit-content',\n                maxHeight: '100%'\n              }}\n            >\n              {/* Column Header */}\n              <Box \n                sx={{ \n                  p: 2, \n                  borderBottom: `1px solid ${column.color}30`,\n                  backgroundColor: 'white',\n                  borderRadius: '8px 8px 0 0'\n                }}\n              >\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Typography \n                    variant=\"subtitle2\" \n                    sx={{ \n                      fontSize: '0.875rem', \n                      fontWeight: 600,\n                      color: column.color,\n                      textTransform: 'uppercase',\n                      letterSpacing: 0.5\n                    }}\n                  >\n                    {column.title}\n                  </Typography>\n                  <Chip \n                    label={column.tasks.length} \n                    size=\"small\" \n                    sx={{ \n                      height: 20,\n                      backgroundColor: column.color,\n                      color: 'white',\n                      fontWeight: 600,\n                      fontSize: '0.7rem'\n                    }}\n                  />\n                </Box>\n              </Box>\n              \n              {/* Tasks List */}\n              <Droppable droppableId={columnId}>\n                {(provided, snapshot) => (\n                  <Box\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    sx={{ \n                      p: 2, \n                      minHeight: 400,\n                      maxHeight: 'calc(100vh - 350px)',\n                      overflowY: 'auto',\n                      backgroundColor: snapshot.isDraggingOver \n                        ? `${column.color}10` \n                        : 'transparent',\n                      transition: 'background-color 0.2s ease'\n                    }}\n                  >\n                    {column.tasks.length === 0 ? (\n                      <Box \n                        sx={{ \n                          textAlign: 'center', \n                          py: 4, \n                          color: '#7f8c8d',\n                          backgroundColor: snapshot.isDraggingOver ? `${column.color}20` : 'transparent',\n                          border: snapshot.isDraggingOver ? `2px dashed ${column.color}` : '2px dashed transparent',\n                          borderRadius: 2,\n                          transition: 'all 0.2s ease'\n                        }}\n                      >\n                        <Typography variant=\"body2\">\n                          Drop tasks here\n                        </Typography>\n                      </Box>\n                    ) : (\n                      column.tasks.map((task, index) => (\n                        <TaskCard \n                          key={task.id} \n                          task={task} \n                          index={index} \n                        />\n                      ))\n                    )}\n                    {provided.placeholder}\n                  </Box>\n                )}\n              </Droppable>\n            </Paper>\n          ))}\n        </Box>\n      </DragDropContext>\n    </Box>\n  );\n};\n\nexport default BoardView;","import React, { useState } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableSortLabel,\n  Paper,\n  Checkbox,\n  IconButton,\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n  Chip,\n  Avatar,\n  Box,\n  Typography,\n  LinearProgress,\n  Tooltip\n} from '@mui/material';\nimport {\n  MoreVert as MoreVertIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Visibility as ViewIcon\n} from '@mui/icons-material';\n\nconst UnifiedTableView = ({\n  data,\n  columns,\n  onSort,\n  sortBy,\n  sortDirection,\n  onRowAction,\n  showCheckboxes = false,\n  selectedRows = [],\n  onSelectRow,\n  onSelectAll,\n  actions = [],\n  emptyStateMessage = \"No data available\",\n  emptyStateIcon: EmptyStateIcon\n}) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedRowData, setSelectedRowData] = useState(null);\n\n  const handleMenuOpen = (event, rowData) => {\n    setAnchorEl(event.currentTarget);\n    setSelectedRowData(rowData);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    setSelectedRowData(null);\n  };\n\n  const handleAction = (action) => {\n    if (onRowAction && selectedRowData) {\n      onRowAction(action, selectedRowData);\n    }\n    handleMenuClose();\n  };\n\n  const handleSort = (column) => {\n    if (column.sortable !== false && onSort) {\n      const isAsc = sortBy === column.key && sortDirection === 'asc';\n      onSort(column.key, isAsc ? 'desc' : 'asc');\n    }\n  };\n\n  const renderCellContent = (column, rowData) => {\n    // Ensure rowData is valid\n    if (!rowData || typeof rowData !== 'object') {\n      console.warn('Invalid rowData in renderCellContent:', rowData);\n      return '-';\n    }\n    \n    const value = rowData[column.key];\n\n    // Safety wrapper to ensure we never return invalid React children\n    const safeRender = (content) => {\n      if (React.isValidElement(content)) {\n        return content;\n      }\n      if (typeof content === 'string' || typeof content === 'number') {\n        return content;\n      }\n      if (content === null || content === undefined) {\n        return '-';\n      }\n      if (typeof content === 'boolean') {\n        return content.toString();\n      }\n      if (typeof content === 'object') {\n        console.warn('Attempting to render object as React child:', content);\n        return '[Object]';\n      }\n      return String(content);\n    };\n\n    if (column.render) {\n      try {\n        const renderedValue = column.render(value, rowData);\n      \n      // If the render function returns an object, we need to handle it properly\n      if (typeof renderedValue === 'object' && renderedValue !== null && !React.isValidElement(renderedValue)) {\n        \n        // Handle avatar objects (check for avatar-specific properties)\n        if (renderedValue.hasOwnProperty('fallback') || renderedValue.hasOwnProperty('bgColor') || renderedValue.hasOwnProperty('text')) {\n          return (\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <Avatar \n                src={renderedValue.src} \n                sx={{ \n                  width: 32, \n                  height: 32,\n                  backgroundColor: renderedValue.bgColor || 'primary.main'\n                }}\n              >\n                {renderedValue.fallback || '?'}\n              </Avatar>\n              {renderedValue.text && (\n                <Typography \n                  variant=\"body2\"\n                  sx={{\n                    cursor: renderedValue.clickable ? 'pointer' : 'default',\n                    color: renderedValue.clickable ? '#3498db' : 'inherit',\n                    textDecoration: 'none',\n                    '&:hover': renderedValue.clickable ? {\n                      textDecoration: 'underline',\n                      color: '#2980b9'\n                    } : {}\n                  }}\n                  onClick={renderedValue.clickable ? renderedValue.onClick : undefined}\n                >\n                  {renderedValue.text}\n                </Typography>\n              )}\n            </Box>\n          );\n        }\n        \n        // Handle chip objects (check for chip-specific properties)\n        if (renderedValue.hasOwnProperty('label') || renderedValue.hasOwnProperty('color')) {\n          return (\n            <Chip\n              label={renderedValue.label || 'Unknown'}\n              size=\"small\"\n              icon={renderedValue.icon || null}\n              sx={{\n                backgroundColor: renderedValue.bgColor || 'grey.100',\n                color: renderedValue.color || 'text.primary',\n                fontWeight: 500,\n                '& .MuiChip-icon': {\n                  color: renderedValue.color || 'text.primary',\n                  fontSize: '16px'\n                }\n              }}\n            />\n          );\n        }\n        \n        // For any other object, convert to string as fallback\n        console.warn('Unhandled object in table cell:', renderedValue, 'Column:', column);\n        try {\n          return String(renderedValue.toString ? renderedValue.toString() : JSON.stringify(renderedValue));\n        } catch (e) {\n          console.error('Failed to stringify object:', e, renderedValue);\n          return 'Error: Invalid object';\n        }\n      }\n      \n      // For non-objects or valid React elements, return safely\n      return safeRender(renderedValue);\n      } catch (error) {\n        console.error('Error in column render function:', error, 'Column:', column.key, 'Value:', value);\n        return 'Error: Render failed';\n      }\n    }\n\n    switch (column.type) {\n      case 'avatar':\n        return (\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Avatar \n              src={value?.src} \n              sx={{ \n                width: 32, \n                height: 32,\n                backgroundColor: value?.bgColor || 'primary.main'\n              }}\n            >\n              {value?.fallback || (typeof value === 'string' ? value.charAt(0) : '')}\n            </Avatar>\n            {value?.text && <Typography variant=\"body2\">{value.text}</Typography>}\n          </Box>\n        );\n\n      case 'chip':\n        if (!value) return '-';\n        return (\n          <Chip\n            label={value.label || value}\n            size=\"small\"\n            icon={value.icon || null}\n            sx={{\n              backgroundColor: value.bgColor || 'grey.100',\n              color: value.color || 'text.primary',\n              fontWeight: 500,\n              '& .MuiChip-icon': {\n                color: value.color || 'text.primary',\n                fontSize: '16px'\n              }\n            }}\n          />\n        );\n\n      case 'progress':\n        if (typeof value !== 'number') return '-';\n        return (\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, minWidth: 100 }}>\n            <LinearProgress\n              variant=\"determinate\"\n              value={value}\n              sx={{ flexGrow: 1, height: 8, borderRadius: 4 }}\n            />\n            <Typography variant=\"caption\" sx={{ minWidth: 35 }}>\n              {value}%\n            </Typography>\n          </Box>\n        );\n\n      case 'date':\n        if (!value) return '-';\n        const date = value instanceof Date ? value : new Date(value);\n        return date.toLocaleDateString();\n\n      case 'currency':\n        if (!value) return '-';\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD'\n        }).format(value);\n\n      case 'email':\n        if (!value) return '-';\n        return (\n          <Typography \n            variant=\"body2\" \n            component=\"a\" \n            href={`mailto:${value}`}\n            sx={{ color: 'primary.main', textDecoration: 'none' }}\n          >\n            {value}\n          </Typography>\n        );\n\n      case 'phone':\n        if (!value) return '-';\n        return (\n          <Typography \n            variant=\"body2\" \n            component=\"a\" \n            href={`tel:${value}`}\n            sx={{ color: 'primary.main', textDecoration: 'none' }}\n          >\n            {value}\n          </Typography>\n        );\n\n      case 'multiline':\n        if (!value) return '-';\n        return (\n          <Tooltip title={value} arrow>\n            <Typography \n              variant=\"body2\" \n              sx={{ \n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n                maxWidth: 200\n              }}\n            >\n              {value}\n            </Typography>\n          </Tooltip>\n        );\n\n      default:\n        return safeRender(value);\n    }\n  };\n\n  if (data.length === 0) {\n    return (\n      <Paper sx={{ p: 4, textAlign: 'center' }}>\n        {EmptyStateIcon && <EmptyStateIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />}\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          {emptyStateMessage}\n        </Typography>\n      </Paper>\n    );\n  }\n\n  return (\n    <TableContainer component={Paper} sx={{ mt: 2 }}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {showCheckboxes && (\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  indeterminate={selectedRows.length > 0 && selectedRows.length < data.length}\n                  checked={data.length > 0 && selectedRows.length === data.length}\n                  onChange={onSelectAll}\n                />\n              </TableCell>\n            )}\n            \n            {columns.map((column) => (\n              <TableCell\n                key={column.key}\n                align={column.align || 'left'}\n                sx={{ \n                  fontWeight: 600,\n                  minWidth: column.minWidth,\n                  width: column.width\n                }}\n              >\n                {column.sortable !== false ? (\n                  <TableSortLabel\n                    active={sortBy === column.key}\n                    direction={sortBy === column.key ? sortDirection : 'asc'}\n                    onClick={() => handleSort(column)}\n                  >\n                    {column.label}\n                  </TableSortLabel>\n                ) : (\n                  column.label\n                )}\n              </TableCell>\n            ))}\n            \n            {actions.length > 0 && (\n              <TableCell align=\"center\" sx={{ width: 60 }}>\n                Actions\n              </TableCell>\n            )}\n          </TableRow>\n        </TableHead>\n        \n        <TableBody>\n          {data.map((row, index) => (\n            <TableRow\n              key={row.id || index}\n              hover\n              selected={selectedRows.includes(row.id)}\n              sx={{ '&:nth-of-type(odd)': { backgroundColor: 'action.hover' } }}\n            >\n              {showCheckboxes && (\n                <TableCell padding=\"checkbox\">\n                  <Checkbox\n                    checked={selectedRows.includes(row.id)}\n                    onChange={() => onSelectRow && onSelectRow(row.id)}\n                  />\n                </TableCell>\n              )}\n              \n              {columns.map((column) => (\n                <TableCell \n                  key={column.key} \n                  align={column.align || 'left'}\n                  sx={{ py: 2 }}\n                >\n                  {renderCellContent(column, row)}\n                </TableCell>\n              ))}\n              \n              {actions.length > 0 && (\n                <TableCell align=\"center\">\n                  <IconButton\n                    size=\"small\"\n                    onClick={(e) => handleMenuOpen(e, row)}\n                  >\n                    <MoreVertIcon />\n                  </IconButton>\n                </TableCell>\n              )}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n\n      {/* Actions Menu */}\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n        PaperProps={{\n          sx: { minWidth: 120 }\n        }}\n      >\n        {actions.map((action) => (\n          <MenuItem\n            key={action.key}\n            onClick={() => handleAction(action.key)}\n            disabled={action.disabled && action.disabled(selectedRowData)}\n          >\n            <ListItemIcon>\n              {action.icon}\n            </ListItemIcon>\n            <ListItemText>\n              {action.label}\n            </ListItemText>\n          </MenuItem>\n        ))}\n      </Menu>\n    </TableContainer>\n  );\n};\n\nexport default UnifiedTableView;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2M12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"\n}, \"1\")], 'Schedule');","import React from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  TextField,\n  MenuItem,\n  Button,\n  Chip,\n  Grid,\n  Collapse,\n  Divider,\n  FormControl,\n  InputLabel,\n  Select,\n  OutlinedInput\n} from '@mui/material';\nimport {\n  DatePicker\n} from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n\nconst UnifiedFilters = ({\n  show,\n  filters,\n  onFilterChange,\n  onClearFilters,\n  onApplyQuickFilter,\n  filterConfig,\n  quickFilters = []\n}) => {\n  const handleFilterChange = (key, value) => {\n    onFilterChange(key, value);\n  };\n\n  const handleClearFilter = (key) => {\n    onFilterChange(key, '');\n  };\n\n  const renderFilterField = (config) => {\n    const { key, label, type, options, placeholder } = config;\n    const value = filters[key] || '';\n\n    switch (type) {\n      case 'select':\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>{label}</InputLabel>\n            <Select\n              value={value}\n              onChange={(e) => handleFilterChange(key, e.target.value)}\n              input={<OutlinedInput label={label} />}\n            >\n              <MenuItem value=\"\">All {label}</MenuItem>\n              {options.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        );\n\n      case 'multiselect':\n        return (\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>{label}</InputLabel>\n            <Select\n              multiple\n              value={Array.isArray(value) ? value : []}\n              onChange={(e) => handleFilterChange(key, e.target.value)}\n              input={<OutlinedInput label={label} />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((val) => {\n                    const option = options.find(opt => opt.value === val);\n                    return (\n                      <Chip \n                        key={val} \n                        label={option ? option.label : val} \n                        size=\"small\" \n                      />\n                    );\n                  })}\n                </Box>\n              )}\n            >\n              {options.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        );\n\n      case 'date':\n        return (\n          <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <DatePicker\n              label={label}\n              value={value || null}\n              onChange={(newValue) => handleFilterChange(key, newValue)}\n              slotProps={{\n                textField: {\n                  size: 'small',\n                  fullWidth: true\n                }\n              }}\n            />\n          </LocalizationProvider>\n        );\n\n      case 'number':\n        return (\n          <TextField\n            fullWidth\n            size=\"small\"\n            label={label}\n            type=\"number\"\n            value={value}\n            onChange={(e) => handleFilterChange(key, e.target.value)}\n            placeholder={placeholder}\n          />\n        );\n\n      case 'text':\n      default:\n        return (\n          <TextField\n            fullWidth\n            size=\"small\"\n            label={label}\n            value={value}\n            onChange={(e) => handleFilterChange(key, e.target.value)}\n            placeholder={placeholder}\n          />\n        );\n    }\n  };\n\n  const getActiveFiltersCount = () => {\n    return Object.values(filters).filter(value => {\n      if (Array.isArray(value)) return value.length > 0;\n      if (value instanceof Date) return true;\n      return value !== '' && value !== null && value !== undefined;\n    }).length;\n  };\n\n  return (\n    <Collapse in={show}>\n      <Paper \n        sx={{ \n          p: 3, \n          mb: 3, \n          backgroundColor: 'grey.50',\n          border: 1,\n          borderColor: 'divider'\n        }}\n      >\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h6\" component=\"h3\">\n            Filters ({getActiveFiltersCount()} active)\n          </Typography>\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            onClick={onClearFilters}\n            disabled={getActiveFiltersCount() === 0}\n          >\n            Clear All\n          </Button>\n        </Box>\n\n        {/* Quick Filters */}\n        {quickFilters.length > 0 && (\n          <>\n            <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 600 }}>\n              Quick Filters\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n              {quickFilters.map((quickFilter) => (\n                <Chip\n                  key={quickFilter.key}\n                  label={quickFilter.label}\n                  onClick={() => onApplyQuickFilter(quickFilter)}\n                  variant=\"outlined\"\n                  size=\"small\"\n                  sx={{ '&:hover': { backgroundColor: 'primary.light', color: 'white' } }}\n                />\n              ))}\n            </Box>\n            <Divider sx={{ mb: 2 }} />\n          </>\n        )}\n\n        {/* Filter Fields */}\n        <Grid container spacing={2}>\n          {filterConfig.map((config) => (\n            <Grid item xs={12} sm={6} md={4} key={config.key}>\n              {renderFilterField(config)}\n            </Grid>\n          ))}\n        </Grid>\n\n        {/* Active Filters Display */}\n        {getActiveFiltersCount() > 0 && (\n          <>\n            <Divider sx={{ my: 2 }} />\n            <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 600 }}>\n              Active Filters\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n              {Object.entries(filters).map(([key, value]) => {\n                if (Array.isArray(value) && value.length === 0) return null;\n                if (!value || value === '') return null;\n                \n                const config = filterConfig.find(c => c.key === key);\n                if (!config) return null;\n\n                let displayValue = value;\n                if (Array.isArray(value)) {\n                  displayValue = value.map(v => {\n                    const option = config.options?.find(opt => opt.value === v);\n                    return option ? option.label : v;\n                  }).join(', ');\n                } else if (config.options) {\n                  const option = config.options.find(opt => opt.value === value);\n                  displayValue = option ? option.label : value;\n                } else if (value instanceof Date) {\n                  displayValue = value.toLocaleDateString();\n                }\n\n                return (\n                  <Chip\n                    key={key}\n                    label={`${config.label}: ${displayValue}`}\n                    onDelete={() => handleClearFilter(key)}\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                  />\n                );\n              }).filter(Boolean)}\n            </Box>\n          </>\n        )}\n      </Paper>\n    </Collapse>\n  );\n};\n\nexport default UnifiedFilters;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M8 5v14l11-7z\"\n}), 'PlayArrow');","import React, { useState, useMemo } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Chip,\n  Button,\n  IconButton,\n  Grid,\n  Avatar,\n  LinearProgress,\n  Paper,\n  Tab,\n  Tabs\n} from '@mui/material';\nimport {\n  CheckCircle,\n  Delete,\n  Person,\n  CalendarToday,\n  Assignment,\n  Warning,\n  Undo,\n  Edit as EditIcon,\n  Visibility as ViewIcon,\n  Schedule,\n  PlayArrow,\n  Flag,\n  Error,\n  PriorityHigh,\n  ViewList,\n  ViewModule,\n  DateRange\n} from '@mui/icons-material';\nimport UnifiedHeader from '../../../components/ui/UnifiedHeader';\nimport UnifiedFilters from '../../../components/ui/UnifiedFilters';\nimport UnifiedTableView from '../../../components/ui/UnifiedTableView';\nimport BoardView from '../../../components/views/BoardView';\nimport { exportTasksToExcel } from '../../../services/export/excelExport';\n\nconst priorityConfig = {\n  low: {\n    label: 'Low',\n    color: '#27ae60',\n    bgColor: '#eafaf1',\n    icon: <Flag />\n  },\n  medium: {\n    label: 'Medium',\n    color: '#f39c12',\n    bgColor: '#fef9e7',\n    icon: <Flag />\n  },\n  high: {\n    label: 'High',\n    color: '#e67e22',\n    bgColor: '#fef5e7',\n    icon: <Warning />\n  },\n  urgent: {\n    label: 'Urgent',\n    color: '#e74c3c',\n    bgColor: '#fdf2f2',\n    icon: <PriorityHigh />\n  }\n};\n\nconst statusConfig = {\n  pending: {\n    label: 'To Do',\n    color: '#f39c12',\n    bgColor: '#fef9e7',\n    icon: <Schedule />\n  },\n  'in-progress': {\n    label: 'In Progress',\n    color: '#3498db',\n    bgColor: '#ebf5fb',\n    icon: <PlayArrow />\n  },\n  'in_progress': {\n    label: 'In Progress',\n    color: '#3498db',\n    bgColor: '#ebf5fb',\n    icon: <PlayArrow />\n  },\n  completed: {\n    label: 'Done',\n    color: '#27ae60',\n    bgColor: '#eafaf1',\n    icon: <CheckCircle />\n  }\n};\n\n// Task view tabs configuration\nconst taskViewTabs = [\n  {\n    value: 'list',\n    label: 'List',\n    icon: <ViewList />\n  },\n  {\n    value: 'board',\n    label: 'Board',\n    icon: <ViewModule />\n  },\n  {\n    value: 'calendar',\n    label: 'Calendar',\n    icon: <DateRange />\n  }\n];\n\nfunction EnhancedTasksList({ \n  tasks, \n  projects, \n  teamMembers = [], \n  onUpdateTask, \n  onDeleteTask, \n  onAddTask, \n  onViewTask, \n  onEditTask,\n  viewMode: propViewMode = 'list',\n  onViewModeChange\n}) {\n  const [searchValue, setSearchValue] = useState('');\n  const [showFilters, setShowFilters] = useState(false);\n  const [currentTab, setCurrentTab] = useState(propViewMode);\n  const [sortBy, setSortBy] = useState('dueDate');\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [filters, setFilters] = useState({\n    status: '',\n    priority: '',\n    project: '',\n    assignee: '',\n    dueDateFrom: null,\n    dueDateTo: null\n  });\n\n  // Filter configuration for tasks\n  const filterConfig = [\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'select',\n      options: [\n        { value: 'pending', label: 'To Do' },\n        { value: 'in-progress', label: 'In Progress' },\n        { value: 'in_progress', label: 'In Progress' },\n        { value: 'completed', label: 'Done' }\n      ]\n    },\n    {\n      key: 'priority',\n      label: 'Priority',\n      type: 'select',\n      options: [\n        { value: 'low', label: 'Low' },\n        { value: 'medium', label: 'Medium' },\n        { value: 'high', label: 'High' },\n        { value: 'urgent', label: 'Urgent' }\n      ]\n    },\n    {\n      key: 'project',\n      label: 'Project',\n      type: 'select',\n      options: projects.map(project => ({\n        value: project.id,\n        label: project.name\n      }))\n    },\n    {\n      key: 'assignee',\n      label: 'Assignee',\n      type: 'select',\n      options: teamMembers.map(member => ({\n        value: member.id,\n        label: member.fullName\n      }))\n    },\n    {\n      key: 'dueDateFrom',\n      label: 'Due Date From',\n      type: 'date'\n    },\n    {\n      key: 'dueDateTo',\n      label: 'Due Date To',\n      type: 'date'\n    }\n  ];\n\n  // Quick filters\n  const quickFilters = [\n    { label: 'Overdue', filters: { status: 'overdue' } },\n    { label: 'Due Today', filters: { status: 'due-today' } },\n    { label: 'This Week', filters: { status: 'this-week' } },\n    { label: 'Urgent', filters: { priority: 'urgent' } },\n    { label: 'In Progress', filters: { status: 'in-progress' } },\n    { label: 'Completed', filters: { status: 'completed' } }\n  ];\n\n  // Calculate active filters\n  const activeFilters = useMemo(() => {\n    const active = [];\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value && value !== '') {\n        if (key === 'project') {\n          const project = projects.find(p => p.id === value);\n          active.push({ key, label: `Project: ${project?.name || value}` });\n        } else if (key === 'assignee') {\n          const member = teamMembers.find(m => m.id === value);\n          active.push({ key, label: `Assignee: ${member?.fullName || value}` });\n        } else {\n          active.push({ key, label: `${key}: ${value}` });\n        }\n      }\n    });\n    if (searchValue) {\n      active.push({ key: 'search', label: `Search: ${searchValue}` });\n    }\n    return active;\n  }, [filters, searchValue, projects, teamMembers]);\n\n  // Filter and sort tasks\n  const filteredAndSortedTasks = useMemo(() => {\n    let filtered = tasks.filter(task => {\n      // Search filter\n      const searchLower = searchValue.toLowerCase();\n      const matchesSearch = !searchValue || \n        task.name.toLowerCase().includes(searchLower) ||\n        task.description?.toLowerCase().includes(searchLower);\n\n      // Status filter with special handling\n      const matchesStatus = !filters.status || \n        task.status === filters.status ||\n        (filters.status === 'overdue' && isOverdue(task)) ||\n        (filters.status === 'due-today' && isDueToday(task)) ||\n        (filters.status === 'this-week' && isDueThisWeek(task));\n\n      // Other filters\n      const matchesPriority = !filters.priority || task.priority === filters.priority;\n      const matchesProject = !filters.project || task.projectId === filters.project;\n      const matchesAssignee = !filters.assignee || task.assignedTo === filters.assignee;\n\n      return matchesSearch && matchesStatus && matchesPriority && matchesProject && matchesAssignee;\n    });\n\n    // Sort\n    filtered.sort((a, b) => {\n      let aValue, bValue;\n      \n      switch (sortBy) {\n        case 'name':\n          aValue = a.name;\n          bValue = b.name;\n          break;\n        case 'priority':\n          const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };\n          aValue = priorityOrder[a.priority] || 0;\n          bValue = priorityOrder[b.priority] || 0;\n          break;\n        case 'dueDate':\n        default:\n          aValue = new Date(a.dueDate);\n          bValue = new Date(b.dueDate);\n          break;\n      }\n\n      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;\n      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  }, [tasks, searchValue, filters, sortBy, sortDirection]);\n\n  // Helper functions\n  const isOverdue = (task) => {\n    if (task.status === 'completed') return false;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return new Date(task.dueDate) < today;\n  };\n\n  const isDueToday = (task) => {\n    if (task.status === 'completed') return false;\n    const today = new Date();\n    const taskDate = new Date(task.dueDate);\n    return today.toDateString() === taskDate.toDateString();\n  };\n\n  const isDueThisWeek = (task) => {\n    if (task.status === 'completed') return false;\n    const today = new Date();\n    const weekFromNow = new Date(today.getTime() + (7 * 24 * 60 * 60 * 1000));\n    const taskDate = new Date(task.dueDate);\n    return taskDate >= today && taskDate <= weekFromNow;\n  };\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric',\n      year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined\n    });\n  };\n\n  const getProjectName = (projectId) => {\n    const project = projects.find(p => p.id === projectId);\n    return project ? project.name : 'Unknown Project';\n  };\n\n  const getAssigneeName = (assigneeId) => {\n    const member = teamMembers.find(m => m.id === assigneeId);\n    return member ? member.fullName : 'Unassigned';\n  };\n\n  const getAssigneeInitials = (assigneeId) => {\n    const member = teamMembers.find(m => m.id === assigneeId);\n    return member ? member.initials : '?';\n  };\n\n  const getAssigneeColor = (assigneeId) => {\n    const member = teamMembers.find(m => m.id === assigneeId);\n    return member ? member.roleColor : '#95A5A6';\n  };\n\n  // Event handlers\n  const handleFilterChange = (key, value) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleClearFilters = () => {\n    setFilters({\n      status: '',\n      priority: '',\n      project: '',\n      assignee: '',\n      dueDateFrom: null,\n      dueDateTo: null\n    });\n    setSearchValue('');\n  };\n\n  const handleClearFilter = (filterKey) => {\n    if (filterKey === 'search') {\n      setSearchValue('');\n    } else {\n      setFilters(prev => ({ ...prev, [filterKey]: '' }));\n    }\n  };\n\n  const handleApplyQuickFilter = (quickFilter) => {\n    setFilters(prev => ({ ...prev, ...quickFilter.filters }));\n  };\n\n  const handleSort = (column, direction) => {\n    setSortBy(column);\n    setSortDirection(direction);\n  };\n\n  const handleExport = () => {\n    exportTasksToExcel(filteredAndSortedTasks, projects, teamMembers);\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setCurrentTab(newValue);\n    if (onViewModeChange) {\n      onViewModeChange(newValue);\n    }\n  };\n\n  // Group tasks by status for board view\n  const tasksByStatus = useMemo(() => {\n    const grouped = {\n      pending: [],\n      'in-progress': [],\n      completed: []\n    };\n\n    filteredAndSortedTasks.forEach(task => {\n      const status = task.status === 'in_progress' ? 'in-progress' : task.status;\n      if (grouped[status]) {\n        grouped[status].push(task);\n      }\n    });\n\n    return grouped;\n  }, [filteredAndSortedTasks]);\n\n  // Table columns for list view\n  const tableColumns = [\n    {\n      key: 'name',\n      label: 'Task',\n      sortable: true,\n      render: (value, row) => (\n        <Box>\n          <Typography variant=\"body2\" sx={{ fontWeight: 500, mb: 0.5 }}>\n            {value}\n          </Typography>\n          {row.description && (\n            <Typography variant=\"caption\" color=\"textSecondary\">\n              {row.description}\n            </Typography>\n          )}\n        </Box>\n      )\n    },\n    {\n      key: 'priority',\n      label: 'Priority',\n      type: 'chip',\n      render: (value) => {\n        const config = priorityConfig[value];\n        return {\n          label: config?.label || value,\n          color: config?.color || '#95A5A6',\n          bgColor: config?.bgColor || '#F8F9FA'\n        };\n      }\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      type: 'chip',\n      render: (value) => {\n        const config = statusConfig[value];\n        return {\n          label: config?.label || value,\n          color: config?.color || '#95A5A6',\n          bgColor: config?.bgColor || '#F8F9FA'\n        };\n      }\n    },\n    {\n      key: 'assignedTo',\n      label: 'Assignee',\n      type: 'avatar',\n      render: (value, row) => {\n        if (!value) return { text: 'Unassigned', fallback: '?' };\n        return {\n          fallback: getAssigneeInitials(value),\n          bgColor: getAssigneeColor(value),\n          text: getAssigneeName(value)\n        };\n      }\n    },\n    {\n      key: 'projectId',\n      label: 'Project',\n      render: (value) => getProjectName(value)\n    },\n    {\n      key: 'dueDate',\n      label: 'Due Date',\n      sortable: true,\n      render: (value, row) => {\n        const isTaskOverdue = isOverdue(row);\n        return (\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: isTaskOverdue ? '#e74c3c' : 'inherit',\n              fontWeight: isTaskOverdue ? 600 : 400\n            }}\n          >\n            {formatDate(value)}\n          </Typography>\n        );\n      }\n    },\n    {\n      key: 'progress',\n      label: 'Progress',\n      render: (value) => (\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <LinearProgress\n            variant=\"determinate\"\n            value={value || 0}\n            sx={{ \n              width: 60, \n              height: 6,\n              borderRadius: 3,\n              backgroundColor: '#E9ECEF'\n            }}\n          />\n          <Typography variant=\"caption\">\n            {value || 0}%\n          </Typography>\n        </Box>\n      )\n    }\n  ];\n\n  const tableActions = [\n    {\n      key: 'view',\n      label: 'View Details',\n      icon: <ViewIcon />\n    },\n    {\n      key: 'edit',\n      label: 'Edit Task',\n      icon: <EditIcon />\n    },\n    {\n      key: 'delete',\n      label: 'Delete Task',\n      icon: <Delete />\n    }\n  ];\n\n  const handleRowAction = (action, task) => {\n    switch (action) {\n      case 'view':\n        onViewTask && onViewTask(task);\n        break;\n      case 'edit':\n        onEditTask && onEditTask(task);\n        break;\n      case 'delete':\n        if (window.confirm(`Are you sure you want to delete \"${task.name}\"?`)) {\n          onDeleteTask && onDeleteTask(task.id);\n        }\n        break;\n    }\n  };\n\n  // Empty state\n  if (tasks.length === 0) {\n    return (\n      <Box>\n        <UnifiedHeader\n          title=\"Tasks\"\n          searchValue={searchValue}\n          onSearchChange={setSearchValue}\n          showFilters={showFilters}\n          onToggleFilters={() => setShowFilters(!showFilters)}\n          activeFiltersCount={activeFilters.length}\n          viewMode=\"list\"\n          onViewModeChange={() => {}}\n          onExport={handleExport}\n          onAdd={onAddTask}\n          addButtonText=\"Add Task\"\n          activeFilters={activeFilters}\n          onClearFilter={handleClearFilter}\n        />\n        <Box sx={{ textAlign: 'center', py: 4 }}>\n          <Assignment sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No tasks added yet. Create a project and add your first task!\n          </Typography>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Unified Header */}\n      <UnifiedHeader\n        title=\"Tasks\"\n        searchValue={searchValue}\n        onSearchChange={setSearchValue}\n        showFilters={showFilters}\n        onToggleFilters={() => setShowFilters(!showFilters)}\n        activeFiltersCount={activeFilters.length}\n        viewMode=\"list\"\n        onViewModeChange={() => {}}\n        onExport={handleExport}\n        onAdd={onAddTask}\n        addButtonText=\"Add Task\"\n        activeFilters={activeFilters}\n        onClearFilter={handleClearFilter}\n      />\n\n      {/* Unified Filters */}\n      <UnifiedFilters\n        show={showFilters}\n        filters={filters}\n        onFilterChange={handleFilterChange}\n        onClearFilters={handleClearFilters}\n        onApplyQuickFilter={handleApplyQuickFilter}\n        filterConfig={filterConfig}\n        quickFilters={quickFilters}\n      />\n\n      {/* Task View Tabs */}\n      <Paper elevation={0} sx={{ borderBottom: '1px solid #E9ECEF', mb: 3 }}>\n        <Tabs\n          value={currentTab}\n          onChange={handleTabChange}\n          sx={{\n            px: 3,\n            '& .MuiTab-root': {\n              textTransform: 'none',\n              fontWeight: 600,\n              minHeight: 48,\n              display: 'flex',\n              flexDirection: 'row',\n              gap: 1\n            }\n          }}\n        >\n          {taskViewTabs.map((tab) => (\n            <Tab\n              key={tab.value}\n              value={tab.value}\n              label={tab.label}\n              icon={tab.icon}\n              iconPosition=\"start\"\n            />\n          ))}\n        </Tabs>\n      </Paper>\n\n      {/* Content based on current tab */}\n      {currentTab === 'list' && (\n        <Box>\n          {/* Completed Tasks Section */}\n          {tasksByStatus.completed.length > 0 && (\n            <Box sx={{ mb: 4 }}>\n              <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 600, color: '#27ae60' }}>\n                ✅ Completed Tasks ({tasksByStatus.completed.length})\n              </Typography>\n              <Grid container spacing={2}>\n                {tasksByStatus.completed.map((task) => (\n                  <Grid item xs={12} sm={6} md={4} key={task.id}>\n                    <Card\n                      elevation={0}\n                      sx={{\n                        border: '1px solid #E9ECEF',\n                        borderRadius: 2,\n                        borderLeft: '4px solid #27ae60',\n                        '&:hover': {\n                          boxShadow: 2,\n                          transform: 'translateY(-2px)'\n                        },\n                        transition: 'all 0.2s ease'\n                      }}\n                    >\n                      <CardContent sx={{ p: 2 }}>\n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 1 }}>\n                          <Typography variant=\"body1\" sx={{ fontWeight: 600, flex: 1 }}>\n                            {task.name}\n                          </Typography>\n                          <CheckCircle sx={{ color: '#27ae60', ml: 1 }} />\n                        </Box>\n                        \n                        {task.description && (\n                          <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 1.5 }}>\n                            {task.description}\n                          </Typography>\n                        )}\n                        \n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n                          <Chip\n                            size=\"small\"\n                            label={getProjectName(task.projectId)}\n                            sx={{ backgroundColor: '#F8F9FA', color: '#7F8C8D' }}\n                          />\n                          {task.assignedTo && (\n                            <Avatar\n                              sx={{\n                                width: 24,\n                                height: 24,\n                                fontSize: '0.75rem',\n                                bgcolor: getAssigneeColor(task.assignedTo)\n                              }}\n                            >\n                              {getAssigneeInitials(task.assignedTo)}\n                            </Avatar>\n                          )}\n                        </Box>\n                        \n                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                          <Typography variant=\"caption\" color=\"textSecondary\">\n                            Completed: {formatDate(task.completedAt || task.dueDate)}\n                          </Typography>\n                          <Box sx={{ display: 'flex', gap: 0.5 }}>\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => onViewTask && onViewTask(task)}\n                              sx={{ color: '#3498db' }}\n                            >\n                              <ViewIcon fontSize=\"small\" />\n                            </IconButton>\n                            <IconButton\n                              size=\"small\"\n                              onClick={() => onEditTask && onEditTask(task)}\n                              sx={{ color: '#f39c12' }}\n                            >\n                              <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Box>\n                        </Box>\n                      </CardContent>\n                    </Card>\n                  </Grid>\n                ))}\n              </Grid>\n            </Box>\n          )}\n\n          {/* Active Tasks Table */}\n          {(tasksByStatus.pending.length > 0 || tasksByStatus['in-progress'].length > 0) && (\n            <Box>\n              <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 600, color: '#2C3E50' }}>\n                📋 Active Tasks ({tasksByStatus.pending.length + tasksByStatus['in-progress'].length})\n              </Typography>\n              <UnifiedTableView\n                data={[...tasksByStatus.pending, ...tasksByStatus['in-progress']]}\n                columns={tableColumns}\n                onSort={handleSort}\n                sortBy={sortBy}\n                sortDirection={sortDirection}\n                onRowAction={handleRowAction}\n                actions={tableActions}\n                emptyStateMessage=\"No active tasks match your filters\"\n                emptyStateIcon={Assignment}\n              />\n            </Box>\n          )}\n\n          {/* Empty state for no tasks */}\n          {filteredAndSortedTasks.length === 0 && (\n            <Paper elevation={0} sx={{ p: 4, textAlign: 'center', border: '1px solid #E9ECEF' }}>\n              <Assignment sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n              <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n                No tasks match your filters\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Try adjusting your search criteria or filters.\n              </Typography>\n            </Paper>\n          )}\n        </Box>\n      )}\n\n      {currentTab === 'board' && (\n        <BoardView\n          tasks={filteredAndSortedTasks}\n          onTaskUpdate={onUpdateTask}\n          teamMembers={teamMembers}\n          projects={projects}\n        />\n      )}\n\n      {currentTab === 'calendar' && (\n        <Paper elevation={0} sx={{ p: 4, textAlign: 'center', border: '1px solid #E9ECEF' }}>\n          <DateRange sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n          <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n            📅 Calendar View Coming Soon\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\">\n            We're working on an amazing calendar interface for your tasks.\n          </Typography>\n        </Paper>\n      )}\n    </Box>\n  );\n}\n\nexport default EnhancedTasksList;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z\"\n}), 'CheckCircle');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 11H7v2h2zm4 0h-2v2h2zm4 0h-2v2h2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2m0 16H5V9h14z\"\n}), 'DateRange');"],"names":["_ref","tasks","onTaskUpdate","teamMembers","projects","columns","useMemo","grouped","id","title","color","bgColor","forEach","col","_objectSpread","task","status","push","priorityConfig","low","label","icon","_jsx","Flag","fontSize","medium","high","Warning","urgent","PriorityHigh","getProjectName","projectId","project","find","p","name","TaskCard","_ref2","index","assignedMember","assignedTo","member","priority","dueInfo","dueDate","date","Date","diffTime","diffDays","Math","ceil","text","concat","abs","toLocaleDateString","formatDueDate","Draggable","draggableId","children","provided","snapshot","Card","ref","innerRef","draggableProps","dragHandleProps","sx","mb","cursor","backgroundColor","border","borderRadius","transition","transform","isDragging","boxShadow","_jsxs","CardContent","pb","Typography","variant","fontWeight","lineHeight","Box","display","alignItems","Chip","size","height","CalendarToday","mr","justifyContent","mt","Tooltip","fullName","Avatar","width","roleColor","initials","PersonIcon","undefined","progress","borderColor","overflow","DragDropContext","onDragEnd","result","destination","source","droppableId","t","newStatus","updates","className","gap","overflowX","Object","entries","map","_ref3","columnId","column","Paper","elevation","minWidth","maxWidth","flexDirection","maxHeight","borderBottom","textTransform","letterSpacing","length","Droppable","droppableProps","minHeight","overflowY","isDraggingOver","textAlign","py","placeholder","data","onSort","sortBy","sortDirection","onRowAction","showCheckboxes","selectedRows","onSelectRow","onSelectAll","actions","emptyStateMessage","emptyStateIcon","EmptyStateIcon","anchorEl","setAnchorEl","useState","selectedRowData","setSelectedRowData","handleMenuClose","renderCellContent","rowData","console","warn","value","key","safeRender","content","React","toString","String","render","renderedValue","hasOwnProperty","src","fallback","clickable","textDecoration","onClick","JSON","stringify","e","error","type","charAt","LinearProgress","flexGrow","Intl","NumberFormat","style","currency","format","component","href","arrow","textOverflow","whiteSpace","TableContainer","Table","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","align","sortable","TableSortLabel","active","direction","isAsc","handleSort","TableBody","row","hover","selected","includes","IconButton","handleMenuOpen","currentTarget","MoreVertIcon","Menu","open","Boolean","onClose","PaperProps","action","MenuItem","handleAction","disabled","ListItemIcon","ListItemText","createSvgIcon","d","show","filters","onFilterChange","onClearFilters","onApplyQuickFilter","filterConfig","quickFilters","handleFilterChange","renderFilterField","config","options","FormControl","fullWidth","InputLabel","Select","target","input","OutlinedInput","option","multiple","Array","isArray","renderValue","flexWrap","val","opt","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","newValue","slotProps","textField","TextField","getActiveFiltersCount","values","filter","Collapse","in","Button","_Fragment","quickFilter","Divider","Grid","container","spacing","item","xs","sm","md","my","c","displayValue","v","_config$options","join","onDelete","handleClearFilter","statusConfig","pending","Schedule","PlayArrow","completed","CheckCircle","taskViewTabs","ViewList","ViewModule","DateRange","onUpdateTask","onDeleteTask","onAddTask","onViewTask","onEditTask","viewMode","propViewMode","onViewModeChange","searchValue","setSearchValue","showFilters","setShowFilters","currentTab","setCurrentTab","setSortBy","setSortDirection","setFilters","assignee","dueDateFrom","dueDateTo","activeFilters","m","filteredAndSortedTasks","filtered","_task$description","searchLower","toLowerCase","matchesSearch","description","matchesStatus","isOverdue","isDueToday","isDueThisWeek","matchesPriority","matchesProject","matchesAssignee","sort","a","b","aValue","bValue","priorityOrder","today","setHours","taskDate","toDateString","weekFromNow","getTime","formatDate","dateString","month","day","year","getFullYear","getAssigneeName","assigneeId","getAssigneeInitials","getAssigneeColor","filterKey","prev","handleExport","exportTasksToExcel","tasksByStatus","tableColumns","isTaskOverdue","tableActions","ViewIcon","EditIcon","Delete","UnifiedHeader","onSearchChange","onToggleFilters","activeFiltersCount","onExport","onAdd","addButtonText","onClearFilter","Assignment","UnifiedFilters","handleClearFilters","Tabs","handleTabChange","event","px","tab","Tab","iconPosition","borderLeft","flex","ml","bgcolor","completedAt","UnifiedTableView","handleRowAction","window","confirm","gutterBottom","BoardView"],"sourceRoot":""}