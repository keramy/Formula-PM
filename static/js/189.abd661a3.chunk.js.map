{"version":3,"file":"static/js/189.abd661a3.chunk.js","mappings":"sVAoBA,MAgYA,EAhYkBA,IAAoE,IAAnE,MAAEC,EAAQ,GAAE,aAAEC,EAAY,YAAEC,EAAc,GAAE,SAAEC,EAAW,IAAIJ,EAG9E,MAAMK,GAAUC,EAAAA,EAAAA,UAAQ,KACtB,MAqBMC,EAAU,CAAC,EA2BjB,MAhDqB,CACnB,CACEC,GAAI,UACJC,MAAO,QACPC,MAAO,UACPC,QAAS,WAEX,CACEH,GAAI,cACJC,MAAO,cACPC,MAAO,UACPC,QAAS,WAEX,CACEH,GAAI,YACJC,MAAO,OACPC,MAAO,UACPC,QAAS,YAOAC,SAAQC,IACnBN,EAAQM,EAAIL,KAAGM,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACVD,GAAG,IACNZ,MAAO,QAKXA,EAAMW,SAAQG,IACZ,IAAIC,EAASD,EAAKC,QAAU,UAGb,gBAAXA,IACFA,EAAS,eAGPT,EAAQS,GACVT,EAAQS,GAAQf,MAAMgB,KAAKF,GAG3BR,EAAiB,QAAEN,MAAMgB,KAAKF,MAI3BR,IACN,CAACN,IAEEiB,EAAiB,CACrBC,IAAK,CAAEC,MAAO,MAAOV,MAAO,UAAWC,QAAS,UAAWU,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,SAAS,WAChFC,OAAQ,CAAEL,MAAO,SAAUV,MAAO,UAAWC,QAAS,UAAWU,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,SAAS,WACtFE,KAAM,CAAEN,MAAO,OAAQV,MAAO,UAAWC,QAAS,UAAWU,MAAMC,EAAAA,EAAAA,KAACK,EAAAA,EAAO,CAACH,SAAS,WACrFI,OAAQ,CAAER,MAAO,SAAUV,MAAO,UAAWC,QAAS,UAAWU,MAAMC,EAAAA,EAAAA,KAACO,EAAAA,EAAY,CAACL,SAAS,YAO1FM,EAAkBC,IACtB,MAAMC,EAAU5B,EAAS6B,MAAKC,GAAKA,EAAE1B,KAAOuB,IAC5C,OAAOC,EAAUA,EAAQG,KAAO,mBAiD5BC,EAAWC,IAAsB,IAArB,KAAEtB,EAAI,MAAEuB,GAAOD,EAC/B,MAAME,GAxDmBC,EAwDgBzB,EAAKyB,WAvDvCrC,EAAY8B,MAAKQ,GAAUA,EAAOjC,KAAOgC,KADvBA,MAyDzB,MAAME,EAAWxB,EAAeH,EAAK2B,WAAaxB,EAAeO,OAC3DkB,EAjDeC,KACrB,IAAKA,EAAS,OAAO,KACrB,MAAMC,EAAO,IAAIC,KAAKF,GAEhBG,EAAWF,EADH,IAAIC,KAEZE,EAAWC,KAAKC,KAAKH,EAAQ,OAEnC,OAAIC,EAAW,EAAU,CAAEG,KAAK,WAADC,OAAaH,KAAKI,IAAIL,GAAS,KAAKtC,MAAO,UAAWkB,QAAQ,GAC5E,IAAboB,EAAuB,CAAEG,KAAM,YAAazC,MAAO,UAAWkB,QAAQ,GACzD,IAAboB,EAAuB,CAAEG,KAAM,eAAgBzC,MAAO,UAAWkB,QAAQ,GACzEoB,GAAY,EAAU,CAAEG,KAAK,GAADC,OAAKJ,EAAQ,cAActC,MAAO,UAAWkB,QAAQ,GAC9E,CAAEuB,KAAMN,EAAKS,qBAAsB5C,MAAO,UAAWkB,QAAQ,IAsCpD2B,CAAcxC,EAAK6B,SAEnC,OACEtB,EAAAA,EAAAA,KAACkC,EAAAA,GAAS,CAACC,YAAa1C,EAAKP,GAAI8B,MAAOA,EAAMoB,SAC3CA,CAACC,EAAUC,KACVtC,EAAAA,EAAAA,KAACuC,EAAAA,GAAI/C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACHgD,IAAKH,EAASI,UACVJ,EAASK,gBACTL,EAASM,iBAAe,IAC5BC,GAAI,CACFC,GAAI,IACJC,OAAQ,UACRC,gBAAiB,QACjBC,OAAQ,oBACRC,aAAc,EACdC,WAAY,uBACZC,UAAWb,EAASc,WAAa,eAAiB,OAClDC,UAAWf,EAASc,WAChB,8BACA,4BACJ,UAAW,CACTC,UAAW,8BACXF,UAAW,qBAEbf,UAEFkB,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CAACX,GAAI,CAAEhC,EAAG,EAAG,eAAgB,CAAE4C,GAAI,IAAMpB,SAAA,EAEnDpC,EAAAA,EAAAA,KAACyD,EAAAA,EAAU,CACTC,QAAQ,QACRd,GAAI,CACFe,WAAY,IACZd,GAAI,EACJzD,MAAO,UACPwE,WAAY,KACZxB,SAED3C,EAAKoB,QAIRb,EAAAA,EAAAA,KAAC6D,EAAAA,EAAG,CAACjB,GAAI,CAAEkB,QAAS,OAAQC,WAAY,SAAUlB,GAAI,KAAMT,UAC1DpC,EAAAA,EAAAA,KAACgE,EAAAA,EAAI,CACHjE,KAAMqB,EAASrB,KACfD,MAAOsB,EAAStB,MAChBmE,KAAK,QACLrB,GAAI,CACFG,gBAAiB3B,EAAS/B,QAC1BD,MAAOgC,EAAShC,MAChBuE,WAAY,IACZO,OAAQ,GACRhE,SAAU,SACV,kBAAmB,CACjBd,MAAOgC,EAAShC,MAChBc,SAAU,cAOlBF,EAAAA,EAAAA,KAACyD,EAAAA,EAAU,CACTC,QAAQ,UACRd,GAAI,CACFxD,MAAO,UACP0E,QAAS,QACTjB,GAAI,GACJT,SAED5B,EAAef,EAAKgB,aAItBY,IACCiC,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACjB,GAAI,CAAEkB,QAAS,OAAQC,WAAY,SAAUlB,GAAI,KAAMT,SAAA,EAC1DpC,EAAAA,EAAAA,KAACmE,EAAAA,EAAa,CAACvB,GAAI,CAAE1C,SAAU,GAAId,MAAOiC,EAAQjC,MAAOgF,GAAI,OAC7DpE,EAAAA,EAAAA,KAACyD,EAAAA,EAAU,CACTC,QAAQ,UACRd,GAAI,CACFxD,MAAOiC,EAAQjC,MACfuE,WAAYtC,EAAQf,OAAS,IAAM,KACnC8B,SAEDf,EAAQQ,WAMfyB,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACjB,GAAI,CACPkB,QAAS,OACTO,eAAgB,gBAChBN,WAAY,SACZO,GAAI,GACJlC,SAAA,EAEApC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAG,CAAAzB,SACDnB,GACCjB,EAAAA,EAAAA,KAACuE,EAAAA,EAAO,CAACpF,MAAO8B,EAAeuD,SAASpC,UACtCpC,EAAAA,EAAAA,KAACyE,EAAAA,EAAM,CACL7B,GAAI,CACF8B,MAAO,GACPR,OAAQ,GACRhE,SAAU,SACV6C,gBAAiB9B,EAAe0D,WAAa,WAC7CvC,SAEDnB,EAAe2D,cAIpB5E,EAAAA,EAAAA,KAACyE,EAAAA,EAAM,CACL7B,GAAI,CACF8B,MAAO,GACPR,OAAQ,GACRnB,gBAAiB,WACjBX,UAEFpC,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CAACjC,GAAI,CAAE1C,SAAU,eAMf4E,IAAlBrF,EAAKsF,UAA0BtF,EAAKsF,SAAW,IAC9C/E,EAAAA,EAAAA,KAACgE,EAAAA,EAAI,CACHlE,MAAK,GAAAgC,OAAKrC,EAAKsF,SAAQ,KACvBd,KAAK,QACLP,QAAQ,WACRd,GAAI,CACFsB,OAAQ,GACRhE,SAAU,SACV8E,YAA+B,MAAlBvF,EAAKsF,SAAmB,UAAY,UACjD3F,MAAyB,MAAlBK,EAAKsF,SAAmB,UAAY,yBAY/D,OACE/E,EAAAA,EAAAA,KAAC6D,EAAAA,EAAG,CAACjB,GAAI,CAAEhC,EAAG,EAAGsD,OAAQ,sBAAuBe,SAAU,UAAW7C,UACnEpC,EAAAA,EAAAA,KAACkF,EAAAA,GAAe,CAACC,UAtLFC,IACjB,IAAKA,EAAOC,YAAa,OAEzB,MAAM,OAAEC,EAAM,YAAED,EAAW,YAAElD,GAAgBiD,EAG7C,GAAIE,EAAOC,cAAgBF,EAAYE,aAAeD,EAAOtE,QAAUqE,EAAYrE,MACjF,OAIF,MAAMvB,EAAOd,EAAMgC,MAAK6E,GAAKA,EAAEtG,KAAOiD,IACtC,IAAK1C,EAAM,OAGX,IAAIgG,EAAYJ,EAAYE,YAGV,gBAAdE,IACFA,EAAY,eAId,MAAMC,EAAU,CACdhG,OAAQ+F,EAERV,SAAwB,cAAdU,EAA4B,IAAMhG,EAAKsF,UAGnDnG,EAAaa,EAAKP,GAAIwG,IAyJkBtD,UACpCpC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAG,CACF8B,UAAU,kBACV/C,GAAI,CACFkB,QAAS,OACT8B,IAAK,EACLC,UAAW,OACX3B,OAAQ,OACRV,GAAI,GACJpB,SAED0D,OAAOC,QAAQhH,GAASiH,KAAIC,IAAA,IAAEC,EAAUC,GAAOF,EAAA,OAC9C3C,EAAAA,EAAAA,MAAC8C,EAAAA,EAAK,CAEJC,UAAW,EACXzD,GAAI,CACF0D,SAAU,IACVC,SAAU,IACVxD,gBAAiBoD,EAAO9G,QACxB2D,OAAO,aAADlB,OAAeqE,EAAO/G,MAAK,MACjC6D,aAAc,EACda,QAAS,OACT0C,cAAe,SACftC,OAAQ,cACRuC,UAAW,QACXrE,SAAA,EAGFpC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAG,CACFjB,GAAI,CACFhC,EAAG,EACH8F,aAAa,aAAD5E,OAAeqE,EAAO/G,MAAK,MACvC2D,gBAAiB,QACjBE,aAAc,eACdb,UAEFkB,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAACjB,GAAI,CAAEkB,QAAS,OAAQC,WAAY,SAAUM,eAAgB,iBAAkBjC,SAAA,EAClFpC,EAAAA,EAAAA,KAACyD,EAAAA,EAAU,CACTC,QAAQ,YACRd,GAAI,CACF1C,SAAU,WACVyD,WAAY,IACZvE,MAAO+G,EAAO/G,MACduH,cAAe,YACfC,cAAe,IACfxE,SAED+D,EAAOhH,SAEVa,EAAAA,EAAAA,KAACgE,EAAAA,EAAI,CACHlE,MAAOqG,EAAOxH,MAAMkI,OACpB5C,KAAK,QACLrB,GAAI,CACFsB,OAAQ,GACRnB,gBAAiBoD,EAAO/G,MACxBA,MAAO,QACPuE,WAAY,IACZzD,SAAU,kBAOlBF,EAAAA,EAAAA,KAAC8G,EAAAA,GAAS,CAACvB,YAAaW,EAAS9D,SAC9BA,CAACC,EAAUC,KACVgB,EAAAA,EAAAA,MAACO,EAAAA,GAAGrE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACFgD,IAAKH,EAASI,UACVJ,EAAS0E,gBAAc,IAC3BnE,GAAI,CACFhC,EAAG,EACHoG,UAAW,IACXP,UAAW,sBACXQ,UAAW,OACXlE,gBAAiBT,EAAS4E,eAAc,GAAApF,OACjCqE,EAAO/G,MAAK,MACf,cACJ8D,WAAY,8BACZd,SAAA,CAEuB,IAAxB+D,EAAOxH,MAAMkI,QACZ7G,EAAAA,EAAAA,KAAC6D,EAAAA,EAAG,CACFjB,GAAI,CACFuE,UAAW,SACXC,GAAI,EACJhI,MAAO,UACP2D,gBAAiBT,EAAS4E,eAAc,GAAApF,OAAMqE,EAAO/G,MAAK,MAAO,cACjE4D,OAAQV,EAAS4E,eAAc,cAAApF,OAAiBqE,EAAO/G,OAAU,yBACjE6D,aAAc,EACdC,WAAY,iBACZd,UAEFpC,EAAAA,EAAAA,KAACyD,EAAAA,EAAU,CAACC,QAAQ,QAAOtB,SAAC,sBAK9B+D,EAAOxH,MAAMqH,KAAI,CAACvG,EAAMuB,KACtBhB,EAAAA,EAAAA,KAACc,EAAQ,CAEPrB,KAAMA,EACNuB,MAAOA,GAFFvB,EAAKP,MAMfmD,EAASgF,oBA5FXnB,Y","sources":["components/views/BoardView.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { \n  Box, \n  Paper, \n  Typography, \n  Chip, \n  Avatar, \n  Card, \n  CardContent,\n  Tooltip\n} from '@mui/material';\nimport {\n  Flag,\n  PriorityHigh,\n  Warning,\n  CalendarToday,\n  Person as PersonIcon\n} from '@mui/icons-material';\n\nconst BoardView = ({ tasks = [], onTaskUpdate, teamMembers = [], projects = [] }) => {\n\n  // Group tasks by status\n  const columns = useMemo(() => {\n    const columnConfig = [\n      {\n        id: 'pending',\n        title: 'TO DO',\n        color: '#f39c12',\n        bgColor: '#fef9e7'\n      },\n      {\n        id: 'in-progress',\n        title: 'IN PROGRESS', \n        color: '#3498db',\n        bgColor: '#ebf5fb'\n      },\n      {\n        id: 'completed',\n        title: 'DONE',\n        color: '#27ae60',\n        bgColor: '#eafaf1'\n      }\n    ];\n\n    const grouped = {};\n    \n    // Initialize columns\n    columnConfig.forEach(col => {\n      grouped[col.id] = {\n        ...col,\n        tasks: []\n      };\n    });\n\n    // Group tasks by status\n    tasks.forEach(task => {\n      let status = task.status || 'pending';\n      \n      // Handle different status formats\n      if (status === 'in_progress') {\n        status = 'in-progress';\n      }\n      \n      if (grouped[status]) {\n        grouped[status].tasks.push(task);\n      } else {\n        // Fallback to pending if status doesn't match\n        grouped['pending'].tasks.push(task);\n      }\n    });\n\n    return grouped;\n  }, [tasks]);\n\n  const priorityConfig = {\n    low: { label: 'Low', color: '#27ae60', bgColor: '#eafaf1', icon: <Flag fontSize=\"small\" /> },\n    medium: { label: 'Medium', color: '#f39c12', bgColor: '#fef9e7', icon: <Flag fontSize=\"small\" /> },\n    high: { label: 'High', color: '#e67e22', bgColor: '#fef5e7', icon: <Warning fontSize=\"small\" /> },\n    urgent: { label: 'Urgent', color: '#e74c3c', bgColor: '#fdf2f2', icon: <PriorityHigh fontSize=\"small\" /> }\n  };\n\n  const getAssignedMember = (assignedTo) => {\n    return teamMembers.find(member => member.id === assignedTo);\n  };\n\n  const getProjectName = (projectId) => {\n    const project = projects.find(p => p.id === projectId);\n    return project ? project.name : 'Unknown Project';\n  };\n\n  const formatDueDate = (dueDate) => {\n    if (!dueDate) return null;\n    const date = new Date(dueDate);\n    const today = new Date();\n    const diffTime = date - today;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n    if (diffDays < 0) return { text: `Overdue ${Math.abs(diffDays)}d`, color: '#e74c3c', urgent: true };\n    if (diffDays === 0) return { text: 'Due today', color: '#f39c12', urgent: true };\n    if (diffDays === 1) return { text: 'Due tomorrow', color: '#e67e22', urgent: false };\n    if (diffDays <= 7) return { text: `${diffDays} days left`, color: '#3498db', urgent: false };\n    return { text: date.toLocaleDateString(), color: '#7f8c8d', urgent: false };\n  };\n\n  const onDragEnd = (result) => {\n    if (!result.destination) return;\n\n    const { source, destination, draggableId } = result;\n    \n    // Don't do anything if dropped in the same position\n    if (source.droppableId === destination.droppableId && source.index === destination.index) {\n      return;\n    }\n\n    // Find the task being moved\n    const task = tasks.find(t => t.id === draggableId);\n    if (!task) return;\n\n    // Determine new status based on destination column\n    let newStatus = destination.droppableId;\n    \n    // Handle status mapping\n    if (newStatus === 'in-progress') {\n      newStatus = 'in-progress';\n    }\n\n    // Update the task status - pass just the updates object\n    const updates = {\n      status: newStatus,\n      // Set progress to 100% if completed\n      progress: newStatus === 'completed' ? 100 : task.progress\n    };\n\n    onTaskUpdate(task.id, updates);\n  };\n\n  const TaskCard = ({ task, index }) => {\n    const assignedMember = getAssignedMember(task.assignedTo);\n    const priority = priorityConfig[task.priority] || priorityConfig.medium;\n    const dueInfo = formatDueDate(task.dueDate);\n\n    return (\n      <Draggable draggableId={task.id} index={index}>\n        {(provided, snapshot) => (\n          <Card\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            sx={{\n              mb: 1.5,\n              cursor: 'pointer',\n              backgroundColor: 'white',\n              border: '1px solid #E9ECEF',\n              borderRadius: 2,\n              transition: 'all 0.2s ease-in-out',\n              transform: snapshot.isDragging ? 'rotate(5deg)' : 'none',\n              boxShadow: snapshot.isDragging \n                ? '0 8px 24px rgba(0,0,0,0.15)' \n                : '0 1px 3px rgba(0,0,0,0.1)',\n              '&:hover': {\n                boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\n                transform: 'translateY(-1px)'\n              }\n            }}\n          >\n            <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>\n              {/* Task Name */}\n              <Typography \n                variant=\"body2\" \n                sx={{ \n                  fontWeight: 500, \n                  mb: 1,\n                  color: '#2C3E50',\n                  lineHeight: 1.4\n                }}\n              >\n                {task.name}\n              </Typography>\n\n              {/* Priority Badge */}\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>\n                <Chip\n                  icon={priority.icon}\n                  label={priority.label}\n                  size=\"small\"\n                  sx={{\n                    backgroundColor: priority.bgColor,\n                    color: priority.color,\n                    fontWeight: 500,\n                    height: 20,\n                    fontSize: '0.7rem',\n                    '& .MuiChip-icon': {\n                      color: priority.color,\n                      fontSize: '12px'\n                    }\n                  }}\n                />\n              </Box>\n\n              {/* Project Name */}\n              <Typography \n                variant=\"caption\" \n                sx={{ \n                  color: '#7f8c8d',\n                  display: 'block',\n                  mb: 1\n                }}\n              >\n                {getProjectName(task.projectId)}\n              </Typography>\n\n              {/* Due Date */}\n              {dueInfo && (\n                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1.5 }}>\n                  <CalendarToday sx={{ fontSize: 12, color: dueInfo.color, mr: 0.5 }} />\n                  <Typography \n                    variant=\"caption\" \n                    sx={{ \n                      color: dueInfo.color,\n                      fontWeight: dueInfo.urgent ? 600 : 400\n                    }}\n                  >\n                    {dueInfo.text}\n                  </Typography>\n                </Box>\n              )}\n\n              {/* Bottom Row - Assignee and Progress */}\n              <Box sx={{ \n                display: 'flex', \n                justifyContent: 'space-between', \n                alignItems: 'center',\n                mt: 1\n              }}>\n                {/* Assigned Member */}\n                <Box>\n                  {assignedMember ? (\n                    <Tooltip title={assignedMember.fullName}>\n                      <Avatar\n                        sx={{\n                          width: 24,\n                          height: 24,\n                          fontSize: '0.7rem',\n                          backgroundColor: assignedMember.roleColor || '#3498db'\n                        }}\n                      >\n                        {assignedMember.initials}\n                      </Avatar>\n                    </Tooltip>\n                  ) : (\n                    <Avatar\n                      sx={{\n                        width: 24,\n                        height: 24,\n                        backgroundColor: '#bdc3c7'\n                      }}\n                    >\n                      <PersonIcon sx={{ fontSize: 14 }} />\n                    </Avatar>\n                  )}\n                </Box>\n\n                {/* Progress */}\n                {task.progress !== undefined && task.progress > 0 && (\n                  <Chip\n                    label={`${task.progress}%`}\n                    size=\"small\"\n                    variant=\"outlined\"\n                    sx={{\n                      height: 20,\n                      fontSize: '0.7rem',\n                      borderColor: task.progress === 100 ? '#27ae60' : '#3498db',\n                      color: task.progress === 100 ? '#27ae60' : '#3498db'\n                    }}\n                  />\n                )}\n              </Box>\n            </CardContent>\n          </Card>\n        )}\n      </Draggable>\n    );\n  };\n\n  return (\n    <Box sx={{ p: 3, height: 'calc(100vh - 200px)', overflow: 'hidden' }}>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Box \n          className=\"board-container\"\n          sx={{ \n            display: 'flex', \n            gap: 3, \n            overflowX: 'auto', \n            height: '100%',\n            pb: 2\n          }}\n        >\n          {Object.entries(columns).map(([columnId, column]) => (\n            <Paper\n              key={columnId}\n              elevation={0}\n              sx={{\n                minWidth: 320,\n                maxWidth: 320,\n                backgroundColor: column.bgColor,\n                border: `1px solid ${column.color}30`,\n                borderRadius: 2,\n                display: 'flex',\n                flexDirection: 'column',\n                height: 'fit-content',\n                maxHeight: '100%'\n              }}\n            >\n              {/* Column Header */}\n              <Box \n                sx={{ \n                  p: 2, \n                  borderBottom: `1px solid ${column.color}30`,\n                  backgroundColor: 'white',\n                  borderRadius: '8px 8px 0 0'\n                }}\n              >\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                  <Typography \n                    variant=\"subtitle2\" \n                    sx={{ \n                      fontSize: '0.875rem', \n                      fontWeight: 600,\n                      color: column.color,\n                      textTransform: 'uppercase',\n                      letterSpacing: 0.5\n                    }}\n                  >\n                    {column.title}\n                  </Typography>\n                  <Chip \n                    label={column.tasks.length} \n                    size=\"small\" \n                    sx={{ \n                      height: 20,\n                      backgroundColor: column.color,\n                      color: 'white',\n                      fontWeight: 600,\n                      fontSize: '0.7rem'\n                    }}\n                  />\n                </Box>\n              </Box>\n              \n              {/* Tasks List */}\n              <Droppable droppableId={columnId}>\n                {(provided, snapshot) => (\n                  <Box\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    sx={{ \n                      p: 2, \n                      minHeight: 400,\n                      maxHeight: 'calc(100vh - 350px)',\n                      overflowY: 'auto',\n                      backgroundColor: snapshot.isDraggingOver \n                        ? `${column.color}10` \n                        : 'transparent',\n                      transition: 'background-color 0.2s ease'\n                    }}\n                  >\n                    {column.tasks.length === 0 ? (\n                      <Box \n                        sx={{ \n                          textAlign: 'center', \n                          py: 4, \n                          color: '#7f8c8d',\n                          backgroundColor: snapshot.isDraggingOver ? `${column.color}20` : 'transparent',\n                          border: snapshot.isDraggingOver ? `2px dashed ${column.color}` : '2px dashed transparent',\n                          borderRadius: 2,\n                          transition: 'all 0.2s ease'\n                        }}\n                      >\n                        <Typography variant=\"body2\">\n                          Drop tasks here\n                        </Typography>\n                      </Box>\n                    ) : (\n                      column.tasks.map((task, index) => (\n                        <TaskCard \n                          key={task.id} \n                          task={task} \n                          index={index} \n                        />\n                      ))\n                    )}\n                    {provided.placeholder}\n                  </Box>\n                )}\n              </Droppable>\n            </Paper>\n          ))}\n        </Box>\n      </DragDropContext>\n    </Box>\n  );\n};\n\nexport default BoardView;"],"names":["_ref","tasks","onTaskUpdate","teamMembers","projects","columns","useMemo","grouped","id","title","color","bgColor","forEach","col","_objectSpread","task","status","push","priorityConfig","low","label","icon","_jsx","Flag","fontSize","medium","high","Warning","urgent","PriorityHigh","getProjectName","projectId","project","find","p","name","TaskCard","_ref2","index","assignedMember","assignedTo","member","priority","dueInfo","dueDate","date","Date","diffTime","diffDays","Math","ceil","text","concat","abs","toLocaleDateString","formatDueDate","Draggable","draggableId","children","provided","snapshot","Card","ref","innerRef","draggableProps","dragHandleProps","sx","mb","cursor","backgroundColor","border","borderRadius","transition","transform","isDragging","boxShadow","_jsxs","CardContent","pb","Typography","variant","fontWeight","lineHeight","Box","display","alignItems","Chip","size","height","CalendarToday","mr","justifyContent","mt","Tooltip","fullName","Avatar","width","roleColor","initials","PersonIcon","undefined","progress","borderColor","overflow","DragDropContext","onDragEnd","result","destination","source","droppableId","t","newStatus","updates","className","gap","overflowX","Object","entries","map","_ref3","columnId","column","Paper","elevation","minWidth","maxWidth","flexDirection","maxHeight","borderBottom","textTransform","letterSpacing","length","Droppable","droppableProps","minHeight","overflowY","isDraggingOver","textAlign","py","placeholder"],"sourceRoot":""}