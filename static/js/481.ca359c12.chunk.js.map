{"version":3,"file":"static/js/481.ca359c12.chunk.js","mappings":"iUAgBA,MAsdA,EAtdmBA,IAA0C,IAAzC,SAAEC,EAAQ,YAAEC,EAAW,SAAEC,GAAUH,EACrD,MAAM,iBAAEI,IAAqBC,EAAAA,EAAAA,OACtBC,EAAUC,IAAeC,EAAAA,EAAAA,WAAQC,EAAAA,EAAAA,GAAC,CACvCC,YAAa,GACbC,kBAAmB,GACnBC,mBAAoB,GACpBC,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,WAAY,GACZC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,OAAQ,UACLxB,KAGEyB,EAAQC,IAAapB,EAAAA,EAAAA,UAAS,CAAC,GAyChCqB,EAAqBC,IACzB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1B1B,GAAY2B,IAAIzB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXyB,GAAI,IACP,CAACH,GAAOC,MAINL,EAAOI,IACTH,GAAUM,IAAIzB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACTyB,GAAI,IACP,CAACH,GAAO,QA4Fd,OACEI,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,UAAU,OAAOpC,SAvCF6B,IACpBA,EAAEQ,iBA1CiBC,MACnB,MAAMC,EAAY,CAAC,EAqCnB,OAnCKlC,EAASI,YAAY+B,SACxBD,EAAU9B,YAAc,4BAGrBJ,EAASK,kBAAkB8B,SAC9BD,EAAU7B,kBAAoB,mCAG3BL,EAASO,MAAM4B,OAER,eAAeC,KAAKpC,EAASO,SACvC2B,EAAU3B,MAAQ,sCAFlB2B,EAAU3B,MAAQ,oBAKfP,EAASQ,MAAM2B,SAClBD,EAAU1B,MAAQ,4BAGfR,EAASS,QAAQ0B,SACpBD,EAAUzB,QAAU,uBAGjBT,EAASU,KAAKyB,SACjBD,EAAUxB,KAAO,oBAGdV,EAASY,QAAQuB,SACpBD,EAAUtB,QAAU,uBAGjBZ,EAASe,WACZmB,EAAUnB,SAAW,wBAGvBO,EAAUY,GAC+B,IAAlCG,OAAOC,KAAKJ,GAAWK,QAMzBN,IAKLtC,EAASK,GACTF,EAAiB,UAAD0C,OACJ5C,EAAc,UAAY,UAAS,kBAC7C,WAGGA,GAEHK,EAAY,CACVG,YAAa,GACbC,kBAAmB,GACnBC,mBAAoB,GACpBC,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,WAAY,GACZC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,SAAU,GACVC,MAAO,GACPC,MAAO,GACPC,OAAQ,YA7BVtB,EAAiB,+CAAgD,UAmCrB2C,GAAI,CAAEC,GAAI,GAAIC,UAC1DC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAEJ,SAAA,EAEzBd,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAGN,UAChBd,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,KAAKV,GAAI,CAAEW,GAAI,EAAGC,MAAO,UAAWC,WAAY,KAAMX,SAAC,2BAK7Ed,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,iBACNjC,KAAK,cACLC,MAAO1B,EAASI,YAChBuD,SAAUpC,EACVqC,QAASvC,EAAOjB,YAChByD,WAAYxC,EAAOjB,YACnB+C,QAAQ,gBAIZtB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBC,EAAAA,EAAAA,MAACkB,EAAAA,EAAW,CAACL,WAAS,EAACG,QAASvC,EAAON,SAAS4B,SAAA,EAC9Cd,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAApB,SAAC,gBACZd,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CACLvC,KAAK,WACLC,MAAO1B,EAASe,SAChB4C,SAAUpC,EACVmC,MAAM,aAAYf,SA5KN,CACtB,oBACA,aACA,aACA,gBACA,SACA,cACA,YACA,aACA,cACA,SACA,iBACA,YACA,qBACA,wBACA,SA+J2BsB,KAAKlD,IACpBc,EAAAA,EAAAA,KAACqC,EAAAA,EAAQ,CAAgBxC,MAAOX,EAAS4B,SACtC5B,GADYA,aAQvBc,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBC,EAAAA,EAAAA,MAACkB,EAAAA,EAAW,CAACL,WAAS,EAAAd,SAAA,EACpBd,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAApB,SAAC,kBACZd,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CACLvC,KAAK,cACLC,MAAO1B,EAASgB,YAChB2C,SAAUpC,EACVmC,MAAM,eAAcf,SA5KL,CACzB,2BACA,0BACA,4BACA,6BACA,gCAyK8BsB,KAAKE,IACvBtC,EAAAA,EAAAA,KAACqC,EAAAA,EAAQ,CAAYxC,MAAOyC,EAAKxB,SAC9BwB,GADYA,aAQvBtC,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,UACNjC,KAAK,UACLC,MAAO1B,EAASc,QAChB6C,SAAUpC,EACV4B,QAAQ,WACRiB,YAAY,+BAIhBvC,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,SACNjC,KAAK,QACLC,MAAO1B,EAASkB,MAChByC,SAAUpC,EACV4B,QAAQ,gBAIZtB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBC,EAAAA,EAAAA,MAACkB,EAAAA,EAAW,CAACL,WAAS,EAAAd,SAAA,EACpBd,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAApB,SAAC,YACZC,EAAAA,EAAAA,MAACoB,EAAAA,EAAM,CACLvC,KAAK,SACLC,MAAO1B,EAASoB,OAChBuC,SAAUpC,EACVmC,MAAM,SAAQf,SAAA,EAEdd,EAAAA,EAAAA,KAACqC,EAAAA,EAAQ,CAACxC,MAAM,SAAQiB,SAAC,YACzBd,EAAAA,EAAAA,KAACqC,EAAAA,EAAQ,CAACxC,MAAM,WAAUiB,SAAC,cAC3Bd,EAAAA,EAAAA,KAACqC,EAAAA,EAAQ,CAACxC,MAAM,YAAWiB,SAAC,uBAMlCd,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAGN,UAChBd,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,KAAKV,GAAI,CAAEW,GAAI,EAAGV,GAAI,EAAGW,MAAO,UAAWC,WAAY,KAAMX,SAAC,2BAKpFd,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,wBACNjC,KAAK,oBACLC,MAAO1B,EAASK,kBAChBsD,SAAUpC,EACVqC,QAASvC,EAAOhB,kBAChBwD,WAAYxC,EAAOhB,kBACnB8C,QAAQ,gBAIZtB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,uBACNjC,KAAK,qBACLC,MAAO1B,EAASM,mBAChBqD,SAAUpC,EACV4B,QAAQ,gBAIZtB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,UACNjC,KAAK,QACL4C,KAAK,QACL3C,MAAO1B,EAASO,MAChBoD,SAAUpC,EACVqC,QAASvC,EAAOd,MAChBsD,WAAYxC,EAAOd,MACnB4C,QAAQ,gBAIZtB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,UACNjC,KAAK,QACLC,MAAO1B,EAASQ,MAChBmD,SAAUpC,EACVqC,QAASvC,EAAOb,MAChBqD,WAAYxC,EAAOb,MACnB2C,QAAQ,gBAKZtB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAGN,UAChBd,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,KAAKV,GAAI,CAAEW,GAAI,EAAGV,GAAI,EAAGW,MAAO,UAAWC,WAAY,KAAMX,SAAC,2BAKpFd,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAGN,UAChBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,YACNjC,KAAK,UACLC,MAAO1B,EAASS,QAChBkD,SAAUpC,EACVqC,QAASvC,EAAOZ,QAChBoD,WAAYxC,EAAOZ,QACnB0C,QAAQ,WACRmB,WAAS,EACTC,KAAM,OAIV1C,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,SACNjC,KAAK,OACLC,MAAO1B,EAASU,KAChBiD,SAAUpC,EACVqC,QAASvC,EAAOX,KAChBmD,WAAYxC,EAAOX,KACnByC,QAAQ,gBAIZtB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,iBACNjC,KAAK,QACLC,MAAO1B,EAASW,MAChBgD,SAAUpC,EACV4B,QAAQ,gBAIZtB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,YACNjC,KAAK,UACLC,MAAO1B,EAASY,QAChB+C,SAAUpC,EACVqC,QAASvC,EAAOT,QAChBiD,WAAYxC,EAAOT,QACnBuC,QAAQ,gBAIZtB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAIM,GAAI,EAAEZ,UACvBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,cACNjC,KAAK,aACLC,MAAO1B,EAASa,WAChB8C,SAAUpC,EACV4B,QAAQ,gBAKZtB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAGN,UAChBC,EAAAA,EAAAA,MAACkB,EAAAA,EAAW,CAACL,WAAS,EAAAd,SAAA,EACpBd,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAApB,SAAC,uBACZd,EAAAA,EAAAA,KAACmC,EAAAA,EAAM,CACLQ,UAAQ,EACR/C,KAAK,WACLC,MAAO1B,EAASiB,SAChB0C,SAjUkBc,IAC5B,MAAM,MAAE/C,GAAU+C,EAAM9C,OACxB1B,GAAY2B,IAAIzB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXyB,GAAI,IACPX,SAA2B,kBAAVS,EAAqBA,EAAMgD,MAAM,KAAOhD,OA8TjDiD,OAAO9C,EAAAA,EAAAA,KAAC+C,EAAAA,EAAa,CAAClB,MAAM,sBAC5BmB,YAAcC,IACZjD,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACW,GAAI,CAAEsC,QAAS,OAAQC,SAAU,OAAQC,IAAK,IAAMtC,SACtDmC,EAASb,KAAKvC,IACbG,EAAAA,EAAAA,KAACqD,EAAAA,EAAI,CAAaxB,MAAOhC,EAAOyC,KAAK,SAA1BzC,OAGfiB,SAtWS,CACrB,mBACA,kBACA,qBACA,oBACA,eACA,aACA,cACA,aACA,kBACA,eA8V0BsB,KAAKkB,IACnBtD,EAAAA,EAAAA,KAACqC,EAAAA,EAAQ,CAAexC,MAAOyD,EAAQxC,SACpCwC,GADYA,aASvBtD,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAGN,UAChBd,EAAAA,EAAAA,KAAC2B,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,QACNjC,KAAK,QACLC,MAAO1B,EAASmB,MAChBwC,SAAUpC,EACV4B,QAAQ,WACRmB,WAAS,EACTC,KAAM,EACNH,YAAY,4CAKhBvC,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACG,MAAI,EAACC,GAAI,GAAGN,UAChBC,EAAAA,EAAAA,MAACd,EAAAA,EAAG,CAACW,GAAI,CAAEsC,QAAS,OAAQE,IAAK,EAAGG,eAAgB,WAAY1C,GAAI,GAAIC,SAAA,CACrE9C,IACCgC,EAAAA,EAAAA,KAACwD,EAAAA,EAAM,CACLC,QAASzF,EACTsD,QAAQ,WACRV,GAAI,CACF8C,aAAc,MACdC,cAAe,OACflC,WAAY,KACZX,SACH,YAIHd,EAAAA,EAAAA,KAACwD,EAAAA,EAAM,CACLhB,KAAK,SACLlB,QAAQ,YACRV,GAAI,CACF8C,aAAc,MACdC,cAAe,OACflC,WAAY,IACZmC,GAAI,GACJ9C,SAED/C,EAAc,gBAAkB,4B","sources":["features/clients/components/ClientForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  TextField,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  OutlinedInput,\n  Typography\n} from '@mui/material';\nimport { useNotification } from '../../../context';\n\nconst ClientForm = ({ onSubmit, initialData, onCancel }) => {\n  const { showNotification } = useNotification();\n  const [formData, setFormData] = useState({\n    companyName: '',\n    contactPersonName: '',\n    contactPersonTitle: '',\n    email: '',\n    phone: '',\n    address: '',\n    city: '',\n    state: '',\n    country: '',\n    postalCode: '',\n    website: '',\n    industry: '',\n    companySize: '',\n    services: [],\n    taxId: '',\n    notes: '',\n    status: 'active',\n    ...initialData\n  });\n\n  const [errors, setErrors] = useState({});\n\n  const industryOptions = [\n    'Banking & Finance',\n    'Technology',\n    'Healthcare',\n    'Manufacturing',\n    'Retail',\n    'Real Estate',\n    'Education',\n    'Government',\n    'Hospitality',\n    'Energy',\n    'Transportation',\n    'Insurance',\n    'Telecommunications',\n    'Media & Entertainment',\n    'Other'\n  ];\n\n  const companySizeOptions = [\n    'Startup (1-10 employees)',\n    'Small (11-50 employees)',\n    'Medium (51-200 employees)',\n    'Large (201-1000 employees)',\n    'Enterprise (1000+ employees)'\n  ];\n\n  const serviceOptions = [\n    'Fit-out Projects',\n    'MEP Engineering',\n    'Project Management',\n    'Design & Planning',\n    'Construction',\n    'Renovation',\n    'Maintenance',\n    'Consulting',\n    'Interior Design',\n    'Procurement'\n  ];\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const handleServicesChange = (event) => {\n    const { value } = event.target;\n    setFormData(prev => ({\n      ...prev,\n      services: typeof value === 'string' ? value.split(',') : value\n    }));\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n\n    if (!formData.companyName.trim()) {\n      newErrors.companyName = 'Company name is required';\n    }\n\n    if (!formData.contactPersonName.trim()) {\n      newErrors.contactPersonName = 'Contact person name is required';\n    }\n\n    if (!formData.email.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n\n    if (!formData.phone.trim()) {\n      newErrors.phone = 'Phone number is required';\n    }\n\n    if (!formData.address.trim()) {\n      newErrors.address = 'Address is required';\n    }\n\n    if (!formData.city.trim()) {\n      newErrors.city = 'City is required';\n    }\n\n    if (!formData.country.trim()) {\n      newErrors.country = 'Country is required';\n    }\n\n    if (!formData.industry) {\n      newErrors.industry = 'Industry is required';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      showNotification('Please fill in all required fields correctly', 'error');\n      return;\n    }\n\n    onSubmit(formData);\n    showNotification(\n      `Client ${initialData ? 'updated' : 'created'} successfully!`,\n      'success'\n    );\n\n    if (!initialData) {\n      // Reset form for new clients\n      setFormData({\n        companyName: '',\n        contactPersonName: '',\n        contactPersonTitle: '',\n        email: '',\n        phone: '',\n        address: '',\n        city: '',\n        state: '',\n        country: '',\n        postalCode: '',\n        website: '',\n        industry: '',\n        companySize: '',\n        services: [],\n        taxId: '',\n        notes: '',\n        status: 'active'\n      });\n    }\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 2 }}>\n      <Grid container spacing={3}>\n        {/* Company Information */}\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" sx={{ mb: 2, color: '#2C3E50', fontWeight: 600 }}>\n            Company Information\n          </Typography>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Company Name *\"\n            name=\"companyName\"\n            value={formData.companyName}\n            onChange={handleInputChange}\n            error={!!errors.companyName}\n            helperText={errors.companyName}\n            variant=\"outlined\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <FormControl fullWidth error={!!errors.industry}>\n            <InputLabel>Industry *</InputLabel>\n            <Select\n              name=\"industry\"\n              value={formData.industry}\n              onChange={handleInputChange}\n              label=\"Industry *\"\n            >\n              {industryOptions.map((industry) => (\n                <MenuItem key={industry} value={industry}>\n                  {industry}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <FormControl fullWidth>\n            <InputLabel>Company Size</InputLabel>\n            <Select\n              name=\"companySize\"\n              value={formData.companySize}\n              onChange={handleInputChange}\n              label=\"Company Size\"\n            >\n              {companySizeOptions.map((size) => (\n                <MenuItem key={size} value={size}>\n                  {size}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Website\"\n            name=\"website\"\n            value={formData.website}\n            onChange={handleInputChange}\n            variant=\"outlined\"\n            placeholder=\"https://www.example.com\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Tax ID\"\n            name=\"taxId\"\n            value={formData.taxId}\n            onChange={handleInputChange}\n            variant=\"outlined\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <FormControl fullWidth>\n            <InputLabel>Status</InputLabel>\n            <Select\n              name=\"status\"\n              value={formData.status}\n              onChange={handleInputChange}\n              label=\"Status\"\n            >\n              <MenuItem value=\"active\">Active</MenuItem>\n              <MenuItem value=\"inactive\">Inactive</MenuItem>\n              <MenuItem value=\"potential\">Potential</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n\n        {/* Contact Information */}\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" sx={{ mb: 2, mt: 2, color: '#2C3E50', fontWeight: 600 }}>\n            Contact Information\n          </Typography>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Contact Person Name *\"\n            name=\"contactPersonName\"\n            value={formData.contactPersonName}\n            onChange={handleInputChange}\n            error={!!errors.contactPersonName}\n            helperText={errors.contactPersonName}\n            variant=\"outlined\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Contact Person Title\"\n            name=\"contactPersonTitle\"\n            value={formData.contactPersonTitle}\n            onChange={handleInputChange}\n            variant=\"outlined\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Email *\"\n            name=\"email\"\n            type=\"email\"\n            value={formData.email}\n            onChange={handleInputChange}\n            error={!!errors.email}\n            helperText={errors.email}\n            variant=\"outlined\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Phone *\"\n            name=\"phone\"\n            value={formData.phone}\n            onChange={handleInputChange}\n            error={!!errors.phone}\n            helperText={errors.phone}\n            variant=\"outlined\"\n          />\n        </Grid>\n\n        {/* Address Information */}\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" sx={{ mb: 2, mt: 2, color: '#2C3E50', fontWeight: 600 }}>\n            Address Information\n          </Typography>\n        </Grid>\n\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            label=\"Address *\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            error={!!errors.address}\n            helperText={errors.address}\n            variant=\"outlined\"\n            multiline\n            rows={2}\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"City *\"\n            name=\"city\"\n            value={formData.city}\n            onChange={handleInputChange}\n            error={!!errors.city}\n            helperText={errors.city}\n            variant=\"outlined\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"State/Province\"\n            name=\"state\"\n            value={formData.state}\n            onChange={handleInputChange}\n            variant=\"outlined\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Country *\"\n            name=\"country\"\n            value={formData.country}\n            onChange={handleInputChange}\n            error={!!errors.country}\n            helperText={errors.country}\n            variant=\"outlined\"\n          />\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <TextField\n            fullWidth\n            label=\"Postal Code\"\n            name=\"postalCode\"\n            value={formData.postalCode}\n            onChange={handleInputChange}\n            variant=\"outlined\"\n          />\n        </Grid>\n\n        {/* Services */}\n        <Grid item xs={12}>\n          <FormControl fullWidth>\n            <InputLabel>Services Required</InputLabel>\n            <Select\n              multiple\n              name=\"services\"\n              value={formData.services}\n              onChange={handleServicesChange}\n              input={<OutlinedInput label=\"Services Required\" />}\n              renderValue={(selected) => (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {selected.map((value) => (\n                    <Chip key={value} label={value} size=\"small\" />\n                  ))}\n                </Box>\n              )}\n            >\n              {serviceOptions.map((service) => (\n                <MenuItem key={service} value={service}>\n                  {service}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n\n        {/* Notes */}\n        <Grid item xs={12}>\n          <TextField\n            fullWidth\n            label=\"Notes\"\n            name=\"notes\"\n            value={formData.notes}\n            onChange={handleInputChange}\n            variant=\"outlined\"\n            multiline\n            rows={3}\n            placeholder=\"Additional notes about the client...\"\n          />\n        </Grid>\n\n        {/* Action Buttons */}\n        <Grid item xs={12}>\n          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end', mt: 2 }}>\n            {onCancel && (\n              <Button\n                onClick={onCancel}\n                variant=\"outlined\"\n                sx={{\n                  borderRadius: '8px',\n                  textTransform: 'none',\n                  fontWeight: 600\n                }}\n              >\n                Cancel\n              </Button>\n            )}\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              sx={{\n                borderRadius: '8px',\n                textTransform: 'none',\n                fontWeight: 600,\n                px: 4\n              }}\n            >\n              {initialData ? 'Update Client' : 'Create Client'}\n            </Button>\n          </Box>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ClientForm;"],"names":["_ref","onSubmit","initialData","onCancel","showNotification","useNotification","formData","setFormData","useState","_objectSpread","companyName","contactPersonName","contactPersonTitle","email","phone","address","city","state","country","postalCode","website","industry","companySize","services","taxId","notes","status","errors","setErrors","handleInputChange","e","name","value","target","prev","_jsx","Box","component","preventDefault","validateForm","newErrors","trim","test","Object","keys","length","concat","sx","mt","children","_jsxs","Grid","container","spacing","item","xs","Typography","variant","mb","color","fontWeight","md","TextField","fullWidth","label","onChange","error","helperText","FormControl","InputLabel","Select","map","MenuItem","size","placeholder","type","multiline","rows","multiple","event","split","input","OutlinedInput","renderValue","selected","display","flexWrap","gap","Chip","service","justifyContent","Button","onClick","borderRadius","textTransform","px"],"sourceRoot":""}