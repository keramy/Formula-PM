{"version":3,"file":"static/js/402.37af4f03.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/esm/ListItemAvatar/listItemAvatarClasses.js","../node_modules/@mui/material/esm/ListItemAvatar/ListItemAvatar.js","../node_modules/@mui/icons-material/esm/Close.js","../node_modules/@mui/icons-material/esm/Task.js","components/ui/GlobalSearchResults.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getListItemAvatarUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemAvatar', slot);\n}\nconst listItemAvatarClasses = generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);\nexport default listItemAvatarClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport ListContext from \"../List/ListContext.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getListItemAvatarUtilityClass } from \"./listItemAvatarClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    alignItems,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']\n  };\n  return composeClasses(slots, getListItemAvatarUtilityClass, classes);\n};\nconst ListItemAvatarRoot = styled('div', {\n  name: 'MuiListItemAvatar',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];\n  }\n})({\n  minWidth: 56,\n  flexShrink: 0,\n  variants: [{\n    props: {\n      alignItems: 'flex-start'\n    },\n    style: {\n      marginTop: 8\n    }\n  }]\n});\n\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n */\nconst ListItemAvatar = /*#__PURE__*/React.forwardRef(function ListItemAvatar(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiListItemAvatar'\n  });\n  const {\n    className,\n    ...other\n  } = props;\n  const context = React.useContext(ListContext);\n  const ownerState = {\n    ...props,\n    alignItems: context.alignItems\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListItemAvatarRoot, {\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemAvatar.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally an `Avatar`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListItemAvatar;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8zm-3.06 16L7.4 14.46l1.41-1.41 2.12 2.12 4.24-4.24 1.41 1.41zM13 9V3.5L18.5 9z\"\n}), 'Task');","import React from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  Box,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  Avatar,\n  Chip,\n  Divider,\n  IconButton,\n  InputBase,\n  Paper\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Search as SearchIcon,\n  Assignment as ProjectIcon,\n  Task as TaskIcon,\n  Person as PersonIcon\n} from '@mui/icons-material';\n\nconst GlobalSearchResults = ({\n  open,\n  searchTerm,\n  onSearchChange,\n  onClose,\n  onSelectResult,\n  results = { projects: [], tasks: [], teamMembers: [] }\n}) => {\n  const getTotalResults = () => {\n    return results.projects.length + results.tasks.length + results.teamMembers.length;\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    return new Date(dateString).toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  const getProjectName = (projectId, projects) => {\n    const project = projects.find(p => p.id === projectId);\n    return project ? project.name : 'Unknown Project';\n  };\n\n  const handleItemClick = (type, item) => {\n    if (onSelectResult) {\n      onSelectResult(type, item);\n    }\n    onClose();\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: {\n          position: 'fixed',\n          top: 80,\n          m: 0,\n          borderRadius: 2,\n          maxHeight: '80vh'\n        }\n      }}\n    >\n      <DialogTitle sx={{ pb: 1 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <SearchIcon color=\"primary\" />\n            <Typography variant=\"h6\">\n              Search Results\n            </Typography>\n            {getTotalResults() > 0 && (\n              <Chip \n                label={`${getTotalResults()} results`} \n                size=\"small\" \n                color=\"primary\" \n                variant=\"outlined\" \n              />\n            )}\n          </Box>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n        \n        {/* Search Input */}\n        <Paper\n          sx={{\n            p: '2px 4px',\n            display: 'flex',\n            alignItems: 'center',\n            mt: 2,\n            backgroundColor: '#F8F9FA',\n            border: '1px solid #E9ECEF',\n            borderRadius: 1\n          }}\n        >\n          <SearchIcon sx={{ p: '10px', color: '#7F8C8D' }} />\n          <InputBase\n            sx={{ ml: 1, flex: 1 }}\n            placeholder=\"Search projects, tasks, team members...\"\n            value={searchTerm}\n            onChange={(e) => onSearchChange(e.target.value)}\n            autoFocus\n          />\n        </Paper>\n      </DialogTitle>\n\n      <DialogContent sx={{ pt: 1 }}>\n        {getTotalResults() === 0 && searchTerm ? (\n          <Box sx={{ textAlign: 'center', py: 4 }}>\n            <SearchIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n              No results found\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Try searching with different keywords\n            </Typography>\n          </Box>\n        ) : !searchTerm ? (\n          <Box sx={{ textAlign: 'center', py: 4 }}>\n            <SearchIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n              Start typing to search\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Search across projects, tasks, and team members\n            </Typography>\n          </Box>\n        ) : (\n          <Box>\n            {/* Projects Results */}\n            {results.projects.length > 0 && (\n              <Box sx={{ mb: 3 }}>\n                <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, mb: 1, color: '#2C3E50' }}>\n                  Projects ({results.projects.length})\n                </Typography>\n                <List dense>\n                  {results.projects.map((project) => (\n                    <ListItem\n                      key={project.id}\n                      button\n                      onClick={() => handleItemClick('project', project)}\n                      sx={{\n                        borderRadius: 1,\n                        mb: 0.5,\n                        '&:hover': { backgroundColor: '#F8F9FA' }\n                      }}\n                    >\n                      <ListItemAvatar>\n                        <Avatar sx={{ bgcolor: '#3498db', width: 32, height: 32 }}>\n                          <ProjectIcon fontSize=\"small\" />\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={\n                          <Typography variant=\"body1\" sx={{ fontWeight: 500 }}>\n                            {project.name}\n                          </Typography>\n                        }\n                        secondary={\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 0.5 }}>\n                            <Chip \n                              label={project.status} \n                              size=\"small\" \n                              variant=\"outlined\"\n                              sx={{ fontSize: '0.7rem', height: 20 }}\n                            />\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {project.type} • Due {formatDate(project.endDate)}\n                            </Typography>\n                          </Box>\n                        }\n                      />\n                    </ListItem>\n                  ))}\n                </List>\n                <Divider sx={{ my: 2 }} />\n              </Box>\n            )}\n\n            {/* Tasks Results */}\n            {results.tasks.length > 0 && (\n              <Box sx={{ mb: 3 }}>\n                <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, mb: 1, color: '#2C3E50' }}>\n                  Tasks ({results.tasks.length})\n                </Typography>\n                <List dense>\n                  {results.tasks.map((task) => (\n                    <ListItem\n                      key={task.id}\n                      button\n                      onClick={() => handleItemClick('task', task)}\n                      sx={{\n                        borderRadius: 1,\n                        mb: 0.5,\n                        '&:hover': { backgroundColor: '#F8F9FA' }\n                      }}\n                    >\n                      <ListItemAvatar>\n                        <Avatar sx={{ bgcolor: '#f39c12', width: 32, height: 32 }}>\n                          <TaskIcon fontSize=\"small\" />\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={\n                          <Typography variant=\"body1\" sx={{ fontWeight: 500 }}>\n                            {task.name}\n                          </Typography>\n                        }\n                        secondary={\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 0.5 }}>\n                            <Chip \n                              label={task.status} \n                              size=\"small\" \n                              variant=\"outlined\"\n                              sx={{ fontSize: '0.7rem', height: 20 }}\n                            />\n                            <Chip \n                              label={task.priority} \n                              size=\"small\" \n                              color={task.priority === 'urgent' ? 'error' : task.priority === 'high' ? 'warning' : 'default'}\n                              sx={{ fontSize: '0.7rem', height: 20 }}\n                            />\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {getProjectName(task.projectId, results.projects)} • Due {formatDate(task.dueDate)}\n                            </Typography>\n                          </Box>\n                        }\n                      />\n                    </ListItem>\n                  ))}\n                </List>\n                <Divider sx={{ my: 2 }} />\n              </Box>\n            )}\n\n            {/* Team Members Results */}\n            {results.teamMembers.length > 0 && (\n              <Box>\n                <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, mb: 1, color: '#2C3E50' }}>\n                  Team Members ({results.teamMembers.length})\n                </Typography>\n                <List dense>\n                  {results.teamMembers.map((member) => (\n                    <ListItem\n                      key={member.id}\n                      button\n                      onClick={() => handleItemClick('teamMember', member)}\n                      sx={{\n                        borderRadius: 1,\n                        mb: 0.5,\n                        '&:hover': { backgroundColor: '#F8F9FA' }\n                      }}\n                    >\n                      <ListItemAvatar>\n                        <Avatar \n                          sx={{ \n                            bgcolor: member.roleColor || '#27ae60', \n                            width: 32, \n                            height: 32,\n                            fontSize: '0.8rem'\n                          }}\n                        >\n                          {member.initials}\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={\n                          <Typography variant=\"body1\" sx={{ fontWeight: 500 }}>\n                            {member.fullName}\n                          </Typography>\n                        }\n                        secondary={\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 0.5 }}>\n                            <Chip \n                              label={member.role} \n                              size=\"small\" \n                              variant=\"outlined\"\n                              sx={{ fontSize: '0.7rem', height: 20 }}\n                            />\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {member.department} • {member.email}\n                            </Typography>\n                          </Box>\n                        }\n                      />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n            )}\n          </Box>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default GlobalSearchResults;"],"names":["getListItemAvatarUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ListItemAvatarRoot","styled","name","overridesResolver","props","styles","ownerState","root","alignItems","alignItemsFlexStart","minWidth","flexShrink","variants","style","marginTop","React","inProps","ref","useDefaultProps","className","other","_objectWithoutProperties","context","ListContext","_objectSpread","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","createSvgIcon","d","_ref","open","searchTerm","onSearchChange","onClose","onSelectResult","results","projects","tasks","teamMembers","getTotalResults","length","formatDate","dateString","Date","toLocaleDateString","month","day","getProjectName","projectId","project","find","p","id","handleItemClick","type","item","_jsxs","Dialog","maxWidth","fullWidth","PaperProps","sx","position","top","m","borderRadius","maxHeight","children","DialogTitle","pb","Box","display","justifyContent","gap","SearchIcon","color","Typography","variant","Chip","label","concat","size","IconButton","onClick","CloseIcon","Paper","mt","backgroundColor","border","InputBase","ml","flex","placeholder","value","onChange","e","target","autoFocus","DialogContent","pt","textAlign","py","fontSize","mb","gutterBottom","fontWeight","List","dense","map","ListItem","button","ListItemAvatar","Avatar","bgcolor","width","height","ProjectIcon","ListItemText","primary","secondary","status","endDate","Divider","my","task","TaskIcon","priority","dueDate","member","roleColor","initials","fullName","role","department","email"],"sourceRoot":""}